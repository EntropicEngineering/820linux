From 760a4722df03c2bbce77b49ada990b485b9d8c8e Mon Sep 17 00:00:00 2001
From: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date: Fri, 18 May 2018 13:56:10 +0100
Subject: [PATCH 030/334] ASoC: qcom: apq8096: Add db820c machine driver

This patch adds support to DB820c machine driver.

Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-by: Banajit Goswami <bgoswami@codeaurora.org>
Signed-off-by: Mark Brown <broonie@kernel.org>

Conflicts:
	sound/soc/qcom/apq8096.c
---
 sound/soc/qcom/Kconfig   |  9 +++++
 sound/soc/qcom/Makefile  |  2 ++
 sound/soc/qcom/apq8096.c | 76 +++++++++++++++++++++++++---------------
 3 files changed, 58 insertions(+), 29 deletions(-)

diff --git a/sound/soc/qcom/Kconfig b/sound/soc/qcom/Kconfig
index 85bb7dd11fd9..87838fa27997 100644
--- a/sound/soc/qcom/Kconfig
+++ b/sound/soc/qcom/Kconfig
@@ -81,3 +81,12 @@ config SND_SOC_QDSP6
 	 This will enable sound soc platform specific
 	 audio drivers. This includes q6asm, q6adm,
 	 q6afe interfaces to DSP using apr.
+
+config SND_SOC_MSM8996
+	tristate "SoC Machine driver for MSM8996 and APQ8096 boards"
+	depends on QCOM_APR
+	select SND_SOC_QDSP6
+	help
+          Support for Qualcomm Technologies LPASS audio block in
+          APQ8096 SoC-based systems.
+          Say Y if you want to use audio device on this SoCs
diff --git a/sound/soc/qcom/Makefile b/sound/soc/qcom/Makefile
index 0276717917c0..206945bb9ba1 100644
--- a/sound/soc/qcom/Makefile
+++ b/sound/soc/qcom/Makefile
@@ -13,9 +13,11 @@ obj-$(CONFIG_SND_SOC_LPASS_APQ8016) += snd-soc-lpass-apq8016.o
 # Machine
 snd-soc-storm-objs := storm.o
 snd-soc-apq8016-sbc-objs := apq8016_sbc.o
+snd-soc-apq8096-objs := apq8096.o
 
 obj-$(CONFIG_SND_SOC_STORM) += snd-soc-storm.o
 obj-$(CONFIG_SND_SOC_APQ8016_SBC) += snd-soc-apq8016-sbc.o
+obj-$(CONFIG_SND_SOC_MSM8996) += snd-soc-apq8096.o
 
 #DSP lib
 obj-$(CONFIG_SND_SOC_QDSP6) += qdsp6/
diff --git a/sound/soc/qcom/apq8096.c b/sound/soc/qcom/apq8096.c
index 5bd24c74c9b2..561cd429e6f2 100644
--- a/sound/soc/qcom/apq8096.c
+++ b/sound/soc/qcom/apq8096.c
@@ -26,7 +26,10 @@ static int apq8096_be_hw_params_fixup(struct snd_soc_pcm_runtime *rtd,
 
 static int apq8096_sbc_parse_of(struct snd_soc_card *card)
 {
-	struct device_node *np, *codec, *platform, *cpu, *node;
+	struct device_node *np;
+	struct device_node *codec = NULL;
+	struct device_node *platform = NULL;
+	struct device_node *cpu = NULL;
 	struct device *dev = card->dev;
 	struct snd_soc_dai_link *link;
 	int ret, num_links;
@@ -37,10 +40,8 @@ static int apq8096_sbc_parse_of(struct snd_soc_card *card)
 		return ret;
 	}
 
-	node = dev->of_node;
-
 	/* DAPM routes */
-	if (of_property_read_bool(node, "qcom,audio-routing")) {
+	if (of_property_read_bool(dev->of_node, "qcom,audio-routing")) {
 		ret = snd_soc_of_parse_audio_routing(card,
 					"qcom,audio-routing");
 		if (ret)
@@ -48,7 +49,7 @@ static int apq8096_sbc_parse_of(struct snd_soc_card *card)
 	}
 
 	/* Populate links */
-	num_links = of_get_child_count(node);
+	num_links = of_get_child_count(dev->of_node);
 
 	/* Allocate the DAI link array */
 	card->dai_link = kcalloc(num_links, sizeof(*link), GFP_KERNEL);
@@ -58,56 +59,59 @@ static int apq8096_sbc_parse_of(struct snd_soc_card *card)
 	card->num_links	= num_links;
 	link = card->dai_link;
 
-	for_each_child_of_node(node, np) {
+	for_each_child_of_node(dev->of_node, np) {
 		cpu = of_get_child_by_name(np, "cpu");
-		platform = of_get_child_by_name(np, "platform");
-		codec = of_get_child_by_name(np, "codec");
-
 		if (!cpu) {
 			dev_err(dev, "Can't find cpu DT node\n");
-			return -EINVAL;
+			ret = -EINVAL;
+			goto err;
 		}
 
 		link->cpu_of_node = of_parse_phandle(cpu, "sound-dai", 0);
 		if (!link->cpu_of_node) {
 			dev_err(card->dev, "error getting cpu phandle\n");
-			return -EINVAL;
-		}
-
-		link->platform_of_node = of_parse_phandle(platform,
-							  "sound-dai", 0);
-		if (!link->platform_of_node) {
-			dev_err(card->dev, "error getting platform phandle\n");
-			return -EINVAL;
+			ret = -EINVAL;
+			goto err;
 		}
 
 		ret = snd_soc_of_get_dai_name(cpu, &link->cpu_dai_name);
 		if (ret) {
 			dev_err(card->dev, "error getting cpu dai name\n");
-			return ret;
+			goto err;
 		}
 
-		if (codec) {
-			ret = snd_soc_of_get_dai_link_codecs(dev, codec, link);
+		platform = of_get_child_by_name(np, "platform");
+		codec = of_get_child_by_name(np, "codec");
+		if (codec && platform) {
+			link->platform_of_node = of_parse_phandle(platform,
+								  "sound-dai",
+								   0);
+			if (!link->platform_of_node) {
+				dev_err(card->dev, "platform dai not found\n");
+				ret = -EINVAL;
+				goto err;
+			}
 
+			ret = snd_soc_of_get_dai_link_codecs(dev, codec, link);
 			if (ret < 0) {
-				dev_err(card->dev, "error getting codec dai name\n");
-				return ret;
+				dev_err(card->dev, "codec dai not found\n");
+				goto err;
 			}
 			link->no_pcm = 1;
-			link->ignore_suspend = 1;
 			link->ignore_pmdown_time = 1;
 			link->be_hw_params_fixup = apq8096_be_hw_params_fixup;
 		} else {
+			link->platform_of_node = link->cpu_of_node;
 			link->codec_dai_name = "snd-soc-dummy-dai";
 			link->codec_name = "snd-soc-dummy";
 			link->dynamic = 1;
 		}
 
+		link->ignore_suspend = 1;
 		ret = of_property_read_string(np, "link-name", &link->name);
 		if (ret) {
 			dev_err(card->dev, "error getting codec dai_link name\n");
-			return ret;
+			goto err;
 		}
 
 		link->dpcm_playback = 1;
@@ -116,6 +120,12 @@ static int apq8096_sbc_parse_of(struct snd_soc_card *card)
 		link++;
 	}
 
+	return 0;
+err:
+	of_node_put(cpu);
+	of_node_put(codec);
+	of_node_put(platform);
+	kfree(card->dai_link);
 	return ret;
 }
 
@@ -133,19 +143,27 @@ static int apq8096_bind(struct device *dev)
 	ret = apq8096_sbc_parse_of(card);
 	if (ret) {
 		dev_err(dev, "Error parsing OF data\n");
-		component_unbind_all(dev, card);
-		return ret;
+		goto err;
 	}
 
-	return snd_soc_register_card(card);
+	ret = snd_soc_register_card(card);
+	if (ret)
+		goto err;
+
+	return 0;
+
+err:
+	component_unbind_all(dev, card);
+	kfree(card);
+	return ret;
 }
 
 static void apq8096_unbind(struct device *dev)
 {
 	struct snd_soc_card *card = dev_get_drvdata(dev);
 
-	component_unbind_all(dev, card);
 	snd_soc_unregister_card(card);
+	component_unbind_all(dev, card);
 	kfree(card->dai_link);
 	kfree(card);
 }
-- 
2.24.1

