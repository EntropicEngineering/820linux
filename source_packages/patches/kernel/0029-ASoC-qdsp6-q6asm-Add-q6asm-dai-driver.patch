From 2f5114791a00d3ad73fa707b3b16509bc9343164 Mon Sep 17 00:00:00 2001
From: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date: Fri, 18 May 2018 13:56:08 +0100
Subject: [PATCH 029/334] ASoC: qdsp6: q6asm: Add q6asm dai driver

This patch adds support to q6asm dai driver which configures Q6ASM streams
to pass pcm data.

Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-and-tested-by: Rohit kumar <rohitkr@codeaurora.org>
Reviewed-by: Banajit Goswami <bgoswami@codeaurora.org>
Signed-off-by: Mark Brown <broonie@kernel.org>

Conflicts:
	sound/soc/qcom/qdsp6/q6asm-dai.c
---
 sound/soc/qcom/Kconfig           |  4 +++
 sound/soc/qcom/qdsp6/Makefile    |  1 +
 sound/soc/qcom/qdsp6/q6asm-dai.c | 55 ++++++++++++--------------------
 3 files changed, 25 insertions(+), 35 deletions(-)

diff --git a/sound/soc/qcom/Kconfig b/sound/soc/qcom/Kconfig
index d3523a30d942..85bb7dd11fd9 100644
--- a/sound/soc/qcom/Kconfig
+++ b/sound/soc/qcom/Kconfig
@@ -62,6 +62,9 @@ config SND_SOC_QDSP6_ROUTING
 config SND_SOC_QDSP6_ASM
 	tristate
 
+config SND_SOC_QDSP6_ASM_DAI
+	tristate
+
 config SND_SOC_QDSP6
 	tristate "SoC ALSA audio driver for QDSP6"
 	depends on QCOM_APR && HAS_DMA
@@ -72,6 +75,7 @@ config SND_SOC_QDSP6
 	select SND_SOC_QDSP6_ADM
 	select SND_SOC_QDSP6_ROUTING
 	select SND_SOC_QDSP6_ASM
+	select SND_SOC_QDSP6_ASM_DAI
 	help
 	 To add support for MSM QDSP6 Soc Audio.
 	 This will enable sound soc platform specific
diff --git a/sound/soc/qcom/qdsp6/Makefile b/sound/soc/qcom/qdsp6/Makefile
index bada1aa303c2..c33b3cacbea1 100644
--- a/sound/soc/qcom/qdsp6/Makefile
+++ b/sound/soc/qcom/qdsp6/Makefile
@@ -5,3 +5,4 @@ obj-$(CONFIG_SND_SOC_QDSP6_AFE_DAI) += q6afe-dai.o
 obj-$(CONFIG_SND_SOC_QDSP6_ADM) += q6adm.o
 obj-$(CONFIG_SND_SOC_QDSP6_ROUTING) += q6routing.o
 obj-$(CONFIG_SND_SOC_QDSP6_ASM) += q6asm.o
+obj-$(CONFIG_SND_SOC_QDSP6_ASM_DAI) += q6asm-dai.o
diff --git a/sound/soc/qcom/qdsp6/q6asm-dai.c b/sound/soc/qcom/qdsp6/q6asm-dai.c
index 9d346b8ac672..349c6a883c63 100644
--- a/sound/soc/qcom/qdsp6/q6asm-dai.c
+++ b/sound/soc/qcom/qdsp6/q6asm-dai.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
-// Copyright (c) 2011-2016, The Linux Foundation
-// Copyright (c) 2017, Linaro Limited
+// Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
+// Copyright (c) 2018, Linaro Limited
 
 #include <linux/init.h>
 #include <linux/err.h>
@@ -20,6 +20,8 @@
 #include "q6routing.h"
 #include "q6dsp-errno.h"
 
+#define DRV_NAME	"q6asm-fe-dai"
+
 #define PLAYBACK_MIN_NUM_PERIODS    2
 #define PLAYBACK_MAX_NUM_PERIODS   8
 #define PLAYBACK_MAX_PERIOD_SIZE    65536
@@ -179,10 +181,11 @@ static int q6asm_dai_prepare(struct snd_pcm_substream *substream)
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct snd_soc_pcm_runtime *soc_prtd = substream->private_data;
 	struct q6asm_dai_rtd *prtd = runtime->private_data;
+	struct snd_soc_component *c = snd_soc_rtdcom_lookup(soc_prtd, DRV_NAME);
 	struct q6asm_dai_data *pdata;
 	int ret, i;
 
-	pdata = snd_soc_platform_get_drvdata(soc_prtd->platform);
+	pdata = snd_soc_component_get_drvdata(c);
 	if (!pdata)
 		return -EINVAL;
 
@@ -294,18 +297,18 @@ static int q6asm_dai_open(struct snd_pcm_substream *substream)
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct snd_soc_pcm_runtime *soc_prtd = substream->private_data;
 	struct snd_soc_dai *cpu_dai = soc_prtd->cpu_dai;
-
+	struct snd_soc_component *c = snd_soc_rtdcom_lookup(soc_prtd, DRV_NAME);
 	struct q6asm_dai_rtd *prtd;
 	struct q6asm_dai_data *pdata;
-	struct device *dev = soc_prtd->platform->dev;
+	struct device *dev = c->dev;
 	int ret = 0;
 	int stream_id;
 
 	stream_id = cpu_dai->driver->id;
 
-	pdata = snd_soc_platform_get_drvdata(soc_prtd->platform);
+	pdata = snd_soc_component_get_drvdata(c);
 	if (!pdata) {
-		pr_err("Platform data not found ..\n");
+		pr_err("Drv data not found ..\n");
 		return -EINVAL;
 	}
 
@@ -417,7 +420,8 @@ static int q6asm_dai_mmap(struct snd_pcm_substream *substream,
 
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct snd_soc_pcm_runtime *soc_prtd = substream->private_data;
-	struct device *dev = soc_prtd->platform->dev;
+	struct snd_soc_component *c = snd_soc_rtdcom_lookup(soc_prtd, DRV_NAME);
+	struct device *dev = c->dev;
 
 	return dma_mmap_coherent(dev, vma,
 			runtime->dma_area, runtime->dma_addr,
@@ -459,16 +463,13 @@ static struct snd_pcm_ops q6asm_dai_ops = {
 static int q6asm_dai_pcm_new(struct snd_soc_pcm_runtime *rtd)
 {
 	struct snd_pcm_substream *psubstream, *csubstream;
-	struct q6asm_dai_data *pdata;
+	struct snd_soc_component *c = snd_soc_rtdcom_lookup(rtd, DRV_NAME);
 	struct snd_pcm *pcm = rtd->pcm;
 	struct device *dev;
 	int size, ret;
 
-	dev = rtd->platform->dev;
-	pdata = snd_soc_platform_get_drvdata(rtd->platform);
-
+	dev = c->dev;
 	size = q6asm_dai_hardware_playback.buffer_bytes_max;
-
 	psubstream = pcm->streams[SNDRV_PCM_STREAM_PLAYBACK].substream;
 	if (psubstream) {
 		ret = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, dev, size,
@@ -509,13 +510,6 @@ static void q6asm_dai_pcm_free(struct snd_pcm *pcm)
 	}
 }
 
-static struct snd_soc_platform_driver q6asm_soc_platform = {
-	.ops		= &q6asm_dai_ops,
-	.pcm_new	= q6asm_dai_pcm_new,
-	.pcm_free	= q6asm_dai_pcm_free,
-
-};
-
 static const struct snd_soc_dapm_route afe_pcm_routes[] = {
 	{"MM_DL1",  NULL, "MultiMedia1 Playback" },
 	{"MM_DL2",  NULL, "MultiMedia2 Playback" },
@@ -547,8 +541,13 @@ static int fe_dai_probe(struct snd_soc_dai *dai)
 	return 0;
 }
 
+
 static const struct snd_soc_component_driver q6asm_fe_dai_component = {
-	.name		= "q6asm-fe-dai",
+	.name		= DRV_NAME,
+	.ops		= &q6asm_dai_ops,
+	.pcm_new	= q6asm_dai_pcm_new,
+	.pcm_free	= q6asm_dai_pcm_free,
+
 };
 
 static struct snd_soc_dai_driver q6asm_fe_dais[] = {
@@ -581,12 +580,6 @@ static int q6asm_dai_bind(struct device *dev, struct device *master, void *data)
 
 	dev_set_drvdata(dev, pdata);
 
-	rc = snd_soc_register_platform(dev,  &q6asm_soc_platform);
-	if (rc) {
-		dev_err(dev, "err_dai_platform\n");
-		return rc;
-	}
-
 	return snd_soc_register_component(dev, &q6asm_fe_dai_component,
 					q6asm_fe_dais,
 					ARRAY_SIZE(q6asm_fe_dais));
@@ -596,7 +589,6 @@ static void q6asm_dai_unbind(struct device *dev, struct device *master,
 {
 	struct q6asm_dai_data *pdata = dev_get_drvdata(dev);
 
-	snd_soc_unregister_platform(dev);
 	snd_soc_unregister_component(dev);
 
 	kfree(pdata);
@@ -619,16 +611,9 @@ static int q6asm_dai_dev_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static const struct of_device_id q6asm_dai_of_match[] = {
-	{ .compatible = "qcom,q6asm-dai"},
-	{ },
-};
-MODULE_DEVICE_TABLE(of, q6asm_dai_of_match);
-
 static struct platform_driver q6asm_dai_platform_driver = {
 	.driver = {
 		.name = "q6asm-dai",
-		.of_match_table = q6asm_dai_of_match,
 	},
 	.probe = q6asm_dai_probe,
 	.remove = q6asm_dai_dev_remove,
-- 
2.24.1

