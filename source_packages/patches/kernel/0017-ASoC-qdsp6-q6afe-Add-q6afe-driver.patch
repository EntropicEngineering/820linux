From b57997d6154f57ea45edb01de010917aca6fda70 Mon Sep 17 00:00:00 2001
From: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date: Fri, 18 May 2018 13:55:56 +0100
Subject: [PATCH 017/334] ASoC: qdsp6: q6afe: Add q6afe driver

This patch adds support to Q6AFE (Audio Front End) module on Q6DSP.

AFE module sits right at the other end of cpu where the codec/audio
devices are connected.

AFE provides abstraced interfaces to both hardware and virtual devices.
Each AFE tx/rx port can be configured to connect to one of the hardware
devices like codec, hdmi, slimbus, i2s and so on. AFE services include
starting, stopping, and if needed, any configurations of the ports.

Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-and-tested-by: Rohit kumar <rohitkr@codeaurora.org>
Reviewed-by: Banajit Goswami <bgoswami@codeaurora.org>
Signed-off-by: Mark Brown <broonie@kernel.org>

Conflicts:
	sound/soc/qcom/qdsp6/q6afe.c
	sound/soc/qcom/qdsp6/q6afe.h
---
 sound/soc/qcom/Kconfig        |   4 +
 sound/soc/qcom/qdsp6/Makefile |   1 +
 sound/soc/qcom/qdsp6/q6afe.c  | 759 ++++++----------------------------
 sound/soc/qcom/qdsp6/q6afe.h  | 160 +------
 4 files changed, 126 insertions(+), 798 deletions(-)

diff --git a/sound/soc/qcom/Kconfig b/sound/soc/qcom/Kconfig
index 37ee0d958145..bb0a2afb0563 100644
--- a/sound/soc/qcom/Kconfig
+++ b/sound/soc/qcom/Kconfig
@@ -47,11 +47,15 @@ config SND_SOC_QDSP6_COMMON
 config SND_SOC_QDSP6_CORE
 	tristate
 
+config SND_SOC_QDSP6_AFE
+	tristate
+
 config SND_SOC_QDSP6
 	tristate "SoC ALSA audio driver for QDSP6"
 	depends on QCOM_APR && HAS_DMA
 	select SND_SOC_QDSP6_COMMON
 	select SND_SOC_QDSP6_CORE
+	select SND_SOC_QDSP6_AFE
 	help
 	 To add support for MSM QDSP6 Soc Audio.
 	 This will enable sound soc platform specific
diff --git a/sound/soc/qcom/qdsp6/Makefile b/sound/soc/qcom/qdsp6/Makefile
index 03b8e89c9731..7ff666bd10ca 100644
--- a/sound/soc/qcom/qdsp6/Makefile
+++ b/sound/soc/qcom/qdsp6/Makefile
@@ -1,2 +1,3 @@
 obj-$(CONFIG_SND_SOC_QDSP6_COMMON) += q6dsp-common.o
 obj-$(CONFIG_SND_SOC_QDSP6_CORE) += q6core.o
+obj-$(CONFIG_SND_SOC_QDSP6_AFE) += q6afe.o
diff --git a/sound/soc/qcom/qdsp6/q6afe.c b/sound/soc/qcom/qdsp6/q6afe.c
index 5f1664083910..5e0032c13aab 100644
--- a/sound/soc/qcom/qdsp6/q6afe.c
+++ b/sound/soc/qcom/qdsp6/q6afe.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
-// Copyright (c) 2011-2017, The Linux Foundation
+// Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 // Copyright (c) 2018, Linaro Limited
 
 #include <linux/slab.h>
@@ -9,15 +9,12 @@
 #include <linux/jiffies.h>
 #include <linux/sched.h>
 #include <linux/module.h>
+#include <linux/kref.h>
 #include <linux/of.h>
 #include <linux/of_platform.h>
 #include <linux/spinlock.h>
 #include <linux/delay.h>
 #include <linux/soc/qcom/apr.h>
-#include <sound/soc.h>
-#include <sound/soc-dai.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
 #include "q6dsp-errno.h"
 #include "q6core.h"
 #include "q6afe.h"
@@ -31,92 +28,9 @@
 #define AFE_PARAM_ID_HDMI_CONFIG	0x00010210
 #define AFE_MODULE_AUDIO_DEV_INTERFACE	0x0001020C
 
-#define AFE_PARAM_ID_CDC_SLIMBUS_SLAVE_CFG 0x00010235
-
-#define AFE_PARAM_ID_LPAIF_CLK_CONFIG	0x00010238
-#define AFE_PARAM_ID_INTERNAL_DIGITAL_CDC_CLK_CONFIG	0x00010239
-
-#define AFE_PARAM_ID_SLIMBUS_CONFIG    0x00010212
-#define AFE_PARAM_ID_I2S_CONFIG	0x0001020D
-
-/* I2S config specific */
-#define AFE_API_VERSION_I2S_CONFIG	0x1
-#define AFE_PORT_I2S_SD0		0x1
-#define AFE_PORT_I2S_SD1		0x2
-#define AFE_PORT_I2S_SD2		0x3
-#define AFE_PORT_I2S_SD3		0x4
-#define AFE_PORT_I2S_SD0_MASK		BIT(0x1)
-#define AFE_PORT_I2S_SD1_MASK		BIT(0x2)
-#define AFE_PORT_I2S_SD2_MASK		BIT(0x3)
-#define AFE_PORT_I2S_SD3_MASK		BIT(0x4)
-#define AFE_PORT_I2S_SD0_1_MASK		GENMASK(2, 1)
-#define AFE_PORT_I2S_SD2_3_MASK		GENMASK(4, 3)
-#define AFE_PORT_I2S_SD0_1_2_MASK	GENMASK(3, 1)
-#define AFE_PORT_I2S_SD0_1_2_3_MASK	GENMASK(4, 1)
-#define AFE_PORT_I2S_QUAD01		0x5
-#define AFE_PORT_I2S_QUAD23		0x6
-#define AFE_PORT_I2S_6CHS		0x7
-#define AFE_PORT_I2S_8CHS		0x8
-#define AFE_PORT_I2S_MONO		0x0
-#define AFE_PORT_I2S_STEREO		0x1
-#define AFE_PORT_CONFIG_I2S_WS_SRC_EXTERNAL	0x0
-#define AFE_PORT_CONFIG_I2S_WS_SRC_INTERNAL	0x1
-#define AFE_LINEAR_PCM_DATA				0x0
-
-
 /* Port IDs */
 #define AFE_API_VERSION_HDMI_CONFIG	0x1
 #define AFE_PORT_ID_MULTICHAN_HDMI_RX	0x100E
-
-#define AFE_API_VERSION_SLIMBUS_CONFIG 0x1
-/* Clock set API version */
-#define AFE_API_VERSION_CLOCK_SET 1
-#define Q6AFE_LPASS_CLK_CONFIG_API_VERSION	0x1
-#define AFE_MODULE_CLOCK_SET		0x0001028F
-#define AFE_PARAM_ID_CLOCK_SET		0x00010290
-
-/* SLIMbus Rx port on channel 0. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_0_RX      0x4000
-/* SLIMbus Tx port on channel 0. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_0_TX      0x4001
-/* SLIMbus Rx port on channel 1. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_1_RX      0x4002
-/* SLIMbus Tx port on channel 1. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_1_TX      0x4003
-/* SLIMbus Rx port on channel 2. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_2_RX      0x4004
-/* SLIMbus Tx port on channel 2. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_2_TX      0x4005
-/* SLIMbus Rx port on channel 3. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_3_RX      0x4006
-/* SLIMbus Tx port on channel 3. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_3_TX      0x4007
-/* SLIMbus Rx port on channel 4. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_4_RX      0x4008
-/* SLIMbus Tx port on channel 4. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_4_TX      0x4009
-/* SLIMbus Rx port on channel 5. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_5_RX      0x400a
-/* SLIMbus Tx port on channel 5. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_5_TX      0x400b
-/* SLIMbus Rx port on channel 6. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_6_RX      0x400c
-/* SLIMbus Tx port on channel 6. */
-#define AFE_PORT_ID_SLIMBUS_MULTI_CHAN_6_TX      0x400d
-#define AFE_PORT_ID_PRIMARY_MI2S_RX         0x1000
-#define AFE_PORT_ID_PRIMARY_MI2S_TX         0x1001
-#define AFE_PORT_ID_SECONDARY_MI2S_RX       0x1002
-#define AFE_PORT_ID_SECONDARY_MI2S_TX       0x1003
-#define AFE_PORT_ID_TERTIARY_MI2S_RX        0x1004
-#define AFE_PORT_ID_TERTIARY_MI2S_TX        0x1005
-#define AFE_PORT_ID_QUATERNARY_MI2S_RX      0x1006
-#define AFE_PORT_ID_QUATERNARY_MI2S_TX      0x1007
-
-#define Q6AFE_LPASS_MODE_CLK1_VALID 1
-#define Q6AFE_LPASS_MODE_CLK2_VALID 2
-#define Q6AFE_LPASS_CLK_SRC_INTERNAL 1
-#define Q6AFE_LPASS_CLK_ROOT_DEFAULT 0
-
 #define TIMEOUT_MS 1000
 #define AFE_CMD_RESP_AVAIL	0
 #define AFE_CMD_RESP_NONE	1
@@ -128,18 +42,15 @@ struct q6afe {
 	struct mutex lock;
 	struct list_head port_list;
 	spinlock_t port_list_lock;
-	struct list_head node;
 	struct platform_device *pdev_dais;
 };
 
 struct afe_port_cmd_device_start {
-	struct apr_hdr hdr;
 	u16 port_id;
 	u16 reserved;
 } __packed;
 
 struct afe_port_cmd_device_stop {
-	struct apr_hdr hdr;
 	u16 port_id;
 	u16 reserved;
 /* Reserved for 32-bit alignment. This field must be set to 0.*/
@@ -152,13 +63,6 @@ struct afe_port_param_data_v2 {
 	u16 reserved;
 } __packed;
 
-struct afe_svc_cmd_set_param {
-	uint32_t payload_size;
-	uint32_t payload_address_lsw;
-	uint32_t payload_address_msw;
-	uint32_t mem_map_handle;
-} __packed;
-
 struct afe_port_cmd_set_param_v2 {
 	u16 port_id;
 	u16 payload_size;
@@ -176,114 +80,8 @@ struct afe_param_id_hdmi_multi_chan_audio_cfg {
 	u16 reserved;
 } __packed;
 
-struct afe_param_id_slimbus_cfg {
-	u32                  sb_cfg_minor_version;
-/* Minor version used for tracking the version of the SLIMBUS
- * configuration interface.
- * Supported values: #AFE_API_VERSION_SLIMBUS_CONFIG
- */
-
-	u16                  slimbus_dev_id;
-/* SLIMbus hardware device ID, which is required to handle
- * multiple SLIMbus hardware blocks.
- * Supported values: - #AFE_SLIMBUS_DEVICE_1 - #AFE_SLIMBUS_DEVICE_2
- */
-	u16                  bit_width;
-/* Bit width of the sample.
- * Supported values: 16, 24
- */
-	u16                  data_format;
-/* Data format supported by the SLIMbus hardware. The default is
- * 0 (#AFE_SB_DATA_FORMAT_NOT_INDICATED), which indicates the
- * hardware does not perform any format conversions before the data
- * transfer.
- */
-	u16                  num_channels;
-/* Number of channels.
- * Supported values: 1 to #AFE_PORT_MAX_AUDIO_CHAN_CNT
- */
-	u8  shared_ch_mapping[AFE_PORT_MAX_AUDIO_CHAN_CNT];
-/* Mapping of shared channel IDs (128 to 255) to which the
- * master port is to be connected.
- * Shared_channel_mapping[i] represents the shared channel assigned
- * for audio channel i in multichannel audio data.
- */
-	u32              sample_rate;
-/* Sampling rate of the port.
- * Supported values:
- * - #AFE_PORT_SAMPLE_RATE_8K
- * - #AFE_PORT_SAMPLE_RATE_16K
- * - #AFE_PORT_SAMPLE_RATE_48K
- * - #AFE_PORT_SAMPLE_RATE_96K
- * - #AFE_PORT_SAMPLE_RATE_192K
- */
-} __packed;
-
-struct afe_clk_cfg {
-	u32                  i2s_cfg_minor_version;
-	u32                  clk_val1;
-	u32                  clk_val2;
-	u16                  clk_src;
-	u16                  clk_root;
-	u16                  clk_set_mode;
-	u16                  reserved;
-} __packed;
-
-struct afe_digital_clk_cfg {
-	u32                  i2s_cfg_minor_version;
-	u32                  clk_val;
-	u16                  clk_root;
-	u16                  reserved;
-} __packed;
-
-struct afe_param_id_i2s_cfg {
-	u32	i2s_cfg_minor_version;
-	u16	bit_width;
-	u16	channel_mode;
-	u16	mono_stereo;
-	u16	ws_src;
-	u32	sample_rate;
-	u16	data_format;
-	u16	reserved;
-} __packed;
-
 union afe_port_config {
 	struct afe_param_id_hdmi_multi_chan_audio_cfg hdmi_multi_ch;
-	struct afe_param_id_slimbus_cfg           slim_cfg;
-	struct afe_param_id_i2s_cfg	i2s_cfg;
-} __packed;
-
-
-struct afe_clk_set {
-	uint32_t clk_set_minor_version;
-	uint32_t clk_id;
-	uint32_t clk_freq_in_hz;
-	uint16_t clk_attri;
-	uint16_t clk_root;
-	uint32_t enable;
-};
-
-struct afe_lpass_clk_config_command {
-	struct apr_hdr			 hdr;
-	struct afe_port_cmd_set_param_v2 param;
-	struct afe_port_param_data_v2    pdata;
-	struct afe_clk_cfg clk_cfg;
-} __packed;
-
-struct afe_lpass_clk_config_command_v2 {
-	struct apr_hdr			hdr;
-	struct afe_svc_cmd_set_param	param;
-	struct afe_port_param_data_v2    pdata;
-	struct afe_clk_set		clk_cfg;
-} __packed;
-
-
-
-struct afe_lpass_digital_clk_config_command {
-	struct apr_hdr			 hdr;
-	struct afe_port_cmd_set_param_v2 param;
-	struct afe_port_param_data_v2    pdata;
-	struct afe_digital_clk_cfg clk_cfg;
 } __packed;
 
 struct q6afe_port {
@@ -294,16 +92,10 @@ struct q6afe_port {
 	int id;
 	int cfg_type;
 	struct q6afe *afe;
-	struct list_head	node;
+	struct kref refcount;
+	struct list_head node;
 };
 
-struct afe_audioif_config_command {
-	struct apr_hdr hdr;
-	struct afe_port_cmd_set_param_v2 param;
-	struct afe_port_param_data_v2 pdata;
-	union afe_port_config pcfg;
-} __packed;
-
 struct afe_port_map {
 	int port_id;
 	int token;
@@ -311,72 +103,60 @@ struct afe_port_map {
 	int is_dig_pcm;
 };
 
-/**
+/*
  * Mapping between Virtual Port IDs to DSP AFE Port ID
  * On B Family SoCs DSP Port IDs are consistent across multiple SoCs
  * on A Family SoCs DSP port IDs are same as virtual Port IDs.
- **/
+ */
 
 static struct afe_port_map port_maps[AFE_PORT_MAX] = {
 	[HDMI_RX] = { AFE_PORT_ID_MULTICHAN_HDMI_RX, HDMI_RX, 1, 1},
-	[SLIMBUS_0_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_0_RX,
-				SLIMBUS_0_RX, 1, 1},
-	[SLIMBUS_1_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_1_RX,
-				SLIMBUS_1_RX, 1, 1},
-	[SLIMBUS_2_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_2_RX,
-				SLIMBUS_2_RX, 1, 1},
-	[SLIMBUS_3_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_3_RX,
-				SLIMBUS_3_RX, 1, 1},
-	[SLIMBUS_4_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_4_RX,
-				SLIMBUS_4_RX, 1, 1},
-	[SLIMBUS_5_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_5_RX,
-				SLIMBUS_5_RX, 1, 1},
-	[QUATERNARY_MI2S_RX] = { AFE_PORT_ID_QUATERNARY_MI2S_RX,
-				QUATERNARY_MI2S_RX, 1, 1},
-	[QUATERNARY_MI2S_TX] = { AFE_PORT_ID_QUATERNARY_MI2S_TX,
-				QUATERNARY_MI2S_TX, 0, 1},
-	[SECONDARY_MI2S_RX] = { AFE_PORT_ID_SECONDARY_MI2S_RX,
-				SECONDARY_MI2S_RX, 1, 1},
-	[SECONDARY_MI2S_TX] = { AFE_PORT_ID_SECONDARY_MI2S_TX,
-				SECONDARY_MI2S_TX, 0, 1},
-	[TERTIARY_MI2S_RX] = { AFE_PORT_ID_TERTIARY_MI2S_RX,
-				TERTIARY_MI2S_RX, 1, 1},
-	[TERTIARY_MI2S_TX] = { AFE_PORT_ID_TERTIARY_MI2S_TX,
-				TERTIARY_MI2S_TX, 0, 1},
-	[PRIMARY_MI2S_RX] = { AFE_PORT_ID_PRIMARY_MI2S_RX,
-				PRIMARY_MI2S_RX, 1, 1},
-	[PRIMARY_MI2S_TX] = { AFE_PORT_ID_PRIMARY_MI2S_TX,
-				PRIMARY_MI2S_RX, 0, 1},
-	[SLIMBUS_6_RX] = { AFE_PORT_ID_SLIMBUS_MULTI_CHAN_6_RX,
-				SLIMBUS_6_RX, 1, 1},
 };
 
-static struct q6afe_port *afe_find_port(struct q6afe *afe, int token)
+static void q6afe_port_free(struct kref *ref)
+{
+	struct q6afe_port *port;
+	struct q6afe *afe;
+	unsigned long flags;
+
+	port = container_of(ref, struct q6afe_port, refcount);
+	afe = port->afe;
+	spin_lock_irqsave(&afe->port_list_lock, flags);
+	list_del(&port->node);
+	spin_unlock_irqrestore(&afe->port_list_lock, flags);
+	kfree(port);
+}
+
+static struct q6afe_port *q6afe_find_port(struct q6afe *afe, int token)
 {
 	struct q6afe_port *p = NULL;
+	struct q6afe_port *ret = NULL;
 	unsigned long flags;
 
 	spin_lock_irqsave(&afe->port_list_lock, flags);
 	list_for_each_entry(p, &afe->port_list, node)
-		if (p->token == token)
+		if (p->token == token) {
+			ret = p;
+			kref_get(&p->refcount);
 			break;
+		}
 
 	spin_unlock_irqrestore(&afe->port_list_lock, flags);
-	return p;
+	return ret;
 }
 
-static int q6afe_callback(struct apr_device *adev,
-			struct apr_client_message *data)
+static int q6afe_callback(struct apr_device *adev, struct apr_resp_pkt *data)
 {
 	struct q6afe *afe = dev_get_drvdata(&adev->dev);
 	struct aprv2_ibasic_rsp_result_t *res;
+	struct apr_hdr *hdr = &data->hdr;
 	struct q6afe_port *port;
 
 	if (!data->payload_size)
 		return 0;
 
 	res = data->payload;
-	switch (data->opcode) {
+	switch (hdr->opcode) {
 	case APR_BASIC_RSP_RESULT: {
 		if (res->status) {
 			dev_err(afe->dev, "cmd = 0x%x returned error = 0x%x\n",
@@ -387,10 +167,11 @@ static int q6afe_callback(struct apr_device *adev,
 		case AFE_PORT_CMD_DEVICE_STOP:
 		case AFE_PORT_CMD_DEVICE_START:
 		case AFE_SVC_CMD_SET_PARAM:
-			port = afe_find_port(afe, data->token);
+			port = q6afe_find_port(afe, hdr->token);
 			if (port) {
 				port->result = *res;
 				wake_up(&port->wait);
+				kref_put(&port->refcount, q6afe_port_free);
 			}
 			break;
 		default:
@@ -422,18 +203,18 @@ int q6afe_get_port_id(int index)
 }
 EXPORT_SYMBOL_GPL(q6afe_get_port_id);
 
-static int afe_apr_send_pkt(struct q6afe *afe, void *data,
+static int afe_apr_send_pkt(struct q6afe *afe, struct apr_pkt *pkt,
 			    struct q6afe_port *port)
 {
 	wait_queue_head_t *wait = &port->wait;
-	struct apr_hdr *hdr = data;
+	struct apr_hdr *hdr = &pkt->hdr;
 	int ret;
 
 	mutex_lock(&afe->lock);
 	port->result.opcode = 0;
 	port->result.status = 0;
 
-	ret = apr_send_pkt(afe->apr, data);
+	ret = apr_send_pkt(afe->apr, pkt);
 	if (ret < 0) {
 		dev_err(afe->dev, "packet not transmitted (%d)\n", ret);
 		ret = -EINVAL;
@@ -446,7 +227,7 @@ static int afe_apr_send_pkt(struct q6afe *afe, void *data,
 		ret = -ETIMEDOUT;
 	} else if (port->result.status > 0) {
 		dev_err(afe->dev, "DSP returned error[%x]\n",
-		        port->result.status);
+			port->result.status);
 		ret = -EINVAL;
 	} else {
 		ret = 0;
@@ -458,191 +239,55 @@ static int afe_apr_send_pkt(struct q6afe *afe, void *data,
 	return ret;
 }
 
-static int q6afe_port_set_param(struct q6afe_port *port, void *data,
+static int q6afe_port_set_param_v2(struct q6afe_port *port, void *data,
 				   int param_id, int module_id, int psize)
 {
-	struct apr_hdr *hdr;
-	struct afe_svc_cmd_set_param *param;
+	struct afe_port_cmd_set_param_v2 *param;
 	struct afe_port_param_data_v2 *pdata;
 	struct q6afe *afe = port->afe;
+	struct apr_pkt *pkt;
 	u16 port_id = port->id;
-	int ret;
+	int ret, pkt_size;
+	void *p, *pl;
 
-	hdr = data;
-	param = data + sizeof(*hdr);
-	pdata = data + sizeof(*hdr) + sizeof(*param);
-
-	hdr->hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
-					      APR_HDR_LEN(APR_HDR_SIZE),
-					      APR_PKT_VER);
-	hdr->pkt_size = sizeof(*hdr) + sizeof(*param) +
-			sizeof(*pdata) + psize;
-	hdr->src_port = 0;
-	hdr->dest_port = 0;
-	hdr->token = port->token;
-	hdr->opcode = AFE_SVC_CMD_SET_PARAM;
-
-	param->payload_size = sizeof(*pdata) + psize;
-	param->payload_address_lsw = 0x00;
-	param->payload_address_msw = 0x00;
-	param->mem_map_handle = 0x00;
-	pdata->module_id = module_id;
-	pdata->param_id = param_id;
-	pdata->param_size = psize;
-
-	ret = afe_apr_send_pkt(afe, data, port);
-	if (ret)
-		dev_err(afe->dev, "AFE enable for port 0x%x failed %d\n",
-		       port_id, ret);
+	pkt_size = APR_HDR_SIZE + sizeof(*param) + sizeof(*pdata) + psize;
+	p = kzalloc(pkt_size, GFP_KERNEL);
+	if (!p)
+		return -ENOMEM;
 
-	return ret;
-}
+	pkt = p;
+	param = p + APR_HDR_SIZE;
+	pdata = p + APR_HDR_SIZE + sizeof(*param);
+	pl = p + APR_HDR_SIZE + sizeof(*param) + sizeof(*pdata);
+	memcpy(pl, data, psize);
 
-static int q6afe_port_set_param_v2(struct q6afe_port *port, void *data,
-				   int param_id, int psize)
-{
-	struct apr_hdr *hdr;
-	struct afe_port_cmd_set_param_v2 *param;
-	struct afe_port_param_data_v2 *pdata;
-	struct q6afe *afe = port->afe;
-	u16 port_id = port->id;
-	int ret;
+	pkt->hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
+					   APR_HDR_LEN(APR_HDR_SIZE),
+					   APR_PKT_VER);
+	pkt->hdr.pkt_size = pkt_size;
+	pkt->hdr.src_port = 0;
+	pkt->hdr.dest_port = 0;
+	pkt->hdr.token = port->token;
+	pkt->hdr.opcode = AFE_PORT_CMD_SET_PARAM_V2;
 
-	hdr = data;
-	param = data + sizeof(*hdr);
-	pdata = data + sizeof(*hdr) + sizeof(*param);
-
-	hdr->hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
-					      APR_HDR_LEN(APR_HDR_SIZE),
-					      APR_PKT_VER);
-	hdr->pkt_size = sizeof(*hdr) + sizeof(*param) +
-			sizeof(*pdata) + psize;
-	hdr->src_port = 0;
-	hdr->dest_port = 0;
-	hdr->token = port->token;
-	hdr->opcode = AFE_PORT_CMD_SET_PARAM_V2;
 	param->port_id = port_id;
 	param->payload_size = sizeof(*pdata) + psize;
 	param->payload_address_lsw = 0x00;
 	param->payload_address_msw = 0x00;
 	param->mem_map_handle = 0x00;
-	pdata->module_id = AFE_MODULE_AUDIO_DEV_INTERFACE;
+	pdata->module_id = module_id;
 	pdata->param_id = param_id;
 	pdata->param_size = psize;
 
-	ret = afe_apr_send_pkt(afe, data, port);
+	ret = afe_apr_send_pkt(afe, pkt, port);
 	if (ret)
 		dev_err(afe->dev, "AFE enable for port 0x%x failed %d\n",
 		       port_id, ret);
 
-
+	kfree(pkt);
 	return ret;
 }
 
-static int q6afe_set_lpass_clock(struct q6afe_port *port,
-				 struct afe_clk_cfg *cfg)
-{
-	struct afe_lpass_clk_config_command clk_cfg = {0};
-	int param_id = AFE_PARAM_ID_LPAIF_CLK_CONFIG;
-	struct q6afe *afe = port->afe;
-
-	if (!cfg) {
-		dev_err(afe->dev, "clock cfg is NULL\n");
-		return -EINVAL;
-	}
-
-	clk_cfg.clk_cfg = *cfg;
-
-	return q6afe_port_set_param_v2(port, &clk_cfg, param_id, sizeof(*cfg));
-}
-
-static int q6afe_set_lpass_clock_v2(struct q6afe_port *port,
-				 struct afe_clk_set *cfg)
-{
-	struct afe_lpass_clk_config_command_v2 clk_cfg = {0};
-	int param_id = AFE_PARAM_ID_CLOCK_SET;
-	int module_id = AFE_MODULE_CLOCK_SET;
-	struct q6afe *afe = port->afe;
-
-	if (!cfg) {
-		dev_err(afe->dev, "clock cfg is NULL\n");
-		return -EINVAL;
-	}
-
-	clk_cfg.clk_cfg = *cfg;
-
-	return q6afe_port_set_param(port, &clk_cfg, param_id,
-				       module_id, sizeof(*cfg));
-}
-
-static int q6afe_set_digital_codec_core_clock(struct q6afe_port *port,
-					      struct afe_digital_clk_cfg *cfg)
-{
-	struct afe_lpass_digital_clk_config_command clk_cfg = {0};
-	int param_id = AFE_PARAM_ID_INTERNAL_DIGITAL_CDC_CLK_CONFIG;
-	struct q6afe *afe = port->afe;
-
-	if (!cfg) {
-		dev_err(afe->dev, "clock cfg is NULL\n");
-		return -EINVAL;
-	}
-
-	clk_cfg.clk_cfg = *cfg;
-
-	return q6afe_port_set_param_v2(port, &clk_cfg, param_id, sizeof(*cfg));
-}
-
-int q6afe_port_set_sysclk(struct q6afe_port *port, int clk_id,
-			  int clk_src, int clk_root,
-			  unsigned int freq, int dir)
-{
-	struct afe_clk_cfg ccfg = {0,};
-	struct afe_clk_set cset = {0,};
-	struct afe_digital_clk_cfg dcfg = {0,};
-	int ret;
-
-	switch (clk_id) {
-	case LPAIF_DIG_CLK:
-		dcfg.i2s_cfg_minor_version = AFE_API_VERSION_I2S_CONFIG;
-		dcfg.clk_val = freq;
-		dcfg.clk_root = clk_root;
-		ret = q6afe_set_digital_codec_core_clock(port, &dcfg);
-		break;
-	case LPAIF_BIT_CLK:
-		ccfg.i2s_cfg_minor_version = AFE_API_VERSION_I2S_CONFIG;
-		ccfg.clk_val1 = freq;
-		ccfg.clk_src = clk_src;
-		ccfg.clk_root = clk_root;
-		ccfg.clk_set_mode = Q6AFE_LPASS_MODE_CLK1_VALID;
-		ret = q6afe_set_lpass_clock(port, &ccfg);
-		break;
-
-	case LPAIF_OSR_CLK:
-		ccfg.i2s_cfg_minor_version = AFE_API_VERSION_I2S_CONFIG;
-		ccfg.clk_val2 = freq;
-		ccfg.clk_src = clk_src;
-		ccfg.clk_root = clk_root;
-		ccfg.clk_set_mode = Q6AFE_LPASS_MODE_CLK2_VALID;
-		ret = q6afe_set_lpass_clock(port, &ccfg);
-		break;
-	case Q6AFE_LPASS_CLK_ID_PRI_MI2S_IBIT ... Q6AFE_LPASS_CLK_ID_INT_MCLK_1:
-		cset.clk_set_minor_version = AFE_API_VERSION_CLOCK_SET;
-		cset.clk_id = clk_id;
-		cset.clk_freq_in_hz = freq;
-		cset.clk_attri = clk_src;
-		cset.clk_root = clk_root;
-		cset.enable = !!freq;
-		ret = q6afe_set_lpass_clock_v2(port, &cset);
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	return ret;
-}
-EXPORT_SYMBOL_GPL(q6afe_port_set_sysclk);
-
 /**
  * q6afe_port_stop() - Stop a afe port
  *
@@ -652,11 +297,13 @@ EXPORT_SYMBOL_GPL(q6afe_port_set_sysclk);
  */
 int q6afe_port_stop(struct q6afe_port *port)
 {
-	int port_id = port->id;
-	struct afe_port_cmd_device_stop stop;
+	struct afe_port_cmd_device_stop *stop;
 	struct q6afe *afe = port->afe;
+	struct apr_pkt *pkt;
+	int port_id = port->id;
 	int ret = 0;
-	int index;
+	int index, pkt_size;
+	void *p;
 
 	port_id = port->id;
 	index = port->token;
@@ -665,50 +312,34 @@ int q6afe_port_stop(struct q6afe_port *port)
 		return -EINVAL;
 	}
 
-	stop.hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
+	pkt_size = APR_HDR_SIZE + sizeof(*stop);
+	p = kzalloc(pkt_size, GFP_KERNEL);
+	if (!p)
+		return -ENOMEM;
+
+	pkt = p;
+	stop = p + APR_HDR_SIZE;
+
+	pkt->hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 					   APR_HDR_LEN(APR_HDR_SIZE),
 					   APR_PKT_VER);
-	stop.hdr.pkt_size = sizeof(stop);
-	stop.hdr.src_port = 0;
-	stop.hdr.dest_port = 0;
-	stop.hdr.token = index;
-	stop.hdr.opcode = AFE_PORT_CMD_DEVICE_STOP;
-	stop.port_id = port_id;
-	stop.reserved = 0;
-
-	ret = afe_apr_send_pkt(afe, &stop, port);
+	pkt->hdr.pkt_size = pkt_size;
+	pkt->hdr.src_port = 0;
+	pkt->hdr.dest_port = 0;
+	pkt->hdr.token = index;
+	pkt->hdr.opcode = AFE_PORT_CMD_DEVICE_STOP;
+	stop->port_id = port_id;
+	stop->reserved = 0;
+
+	ret = afe_apr_send_pkt(afe, pkt, port);
 	if (ret)
 		dev_err(afe->dev, "AFE close failed %d\n", ret);
 
+	kfree(pkt);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(q6afe_port_stop);
 
-/**
- * q6afe_slim_port_prepare() - Prepare slim afe port.
- *
- * @port: Instance of afe port
- * @cfg: SLIM configuration for the afe port
- *
- */
-void q6afe_slim_port_prepare(struct q6afe_port *port,
-			     struct q6afe_slim_cfg *cfg)
-{
-	union afe_port_config *pcfg = &port->port_cfg;
-
-	pcfg->slim_cfg.sb_cfg_minor_version = AFE_API_VERSION_SLIMBUS_CONFIG;
-	pcfg->slim_cfg.sample_rate = cfg->sample_rate;
-	pcfg->slim_cfg.bit_width = cfg->bit_width;
-	pcfg->slim_cfg.num_channels = cfg->num_channels;
-	pcfg->slim_cfg.data_format = cfg->data_format;
-	pcfg->slim_cfg.shared_ch_mapping[0] = cfg->ch_mapping[0];
-	pcfg->slim_cfg.shared_ch_mapping[1] = cfg->ch_mapping[1];
-	pcfg->slim_cfg.shared_ch_mapping[2] = cfg->ch_mapping[2];
-	pcfg->slim_cfg.shared_ch_mapping[3] = cfg->ch_mapping[3];
-
-}
-EXPORT_SYMBOL_GPL(q6afe_slim_port_prepare);
-
 /**
  * q6afe_hdmi_port_prepare() - Prepare hdmi afe port.
  *
@@ -730,149 +361,6 @@ void q6afe_hdmi_port_prepare(struct q6afe_port *port,
 }
 EXPORT_SYMBOL_GPL(q6afe_hdmi_port_prepare);
 
-/**
- * q6afe_i2s_port_prepare() - Prepare i2s afe port.
- *
- * @port: Instance of afe port
- * @cfg: I2S configuration for the afe port
- * Return: Will be an negative on error and zero on success.
- */
-int q6afe_i2s_port_prepare(struct q6afe_port *port, struct q6afe_i2s_cfg *cfg)
-{
-	union afe_port_config *pcfg = &port->port_cfg;
-	struct device *dev = port->afe->dev;
-	int num_sd_lines;
-
-	pcfg->i2s_cfg.i2s_cfg_minor_version = AFE_API_VERSION_I2S_CONFIG;
-	pcfg->i2s_cfg.sample_rate = cfg->sample_rate;
-	pcfg->i2s_cfg.bit_width = cfg->bit_width;
-	pcfg->i2s_cfg.data_format = AFE_LINEAR_PCM_DATA;
-
-	switch (cfg->fmt & SND_SOC_DAIFMT_MASTER_MASK) {
-	case SND_SOC_DAIFMT_CBS_CFS:
-		pcfg->i2s_cfg.ws_src = AFE_PORT_CONFIG_I2S_WS_SRC_INTERNAL;
-		break;
-	case SND_SOC_DAIFMT_CBM_CFM:
-		/* CPU is slave */
-		pcfg->i2s_cfg.ws_src = AFE_PORT_CONFIG_I2S_WS_SRC_EXTERNAL;
-		break;
-	default:
-		break;
-	}
-
-	num_sd_lines = hweight_long(cfg->sd_line_mask);
-
-	switch (num_sd_lines) {
-	case 0:
-		dev_err(dev, "no line is assigned\n");
-		return -EINVAL;
-	case 1:
-		switch (cfg->sd_line_mask) {
-		case AFE_PORT_I2S_SD0_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_SD0;
-			break;
-		case AFE_PORT_I2S_SD1_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_SD1;
-			break;
-		case AFE_PORT_I2S_SD2_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_SD2;
-			break;
-		case AFE_PORT_I2S_SD3_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_SD3;
-			break;
-		default:
-			dev_err(dev, "Invalid SD lines\n");
-			return -EINVAL;
-		}
-		break;
-	case 2:
-		switch (cfg->sd_line_mask) {
-		case AFE_PORT_I2S_SD0_1_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_QUAD01;
-			break;
-		case AFE_PORT_I2S_SD2_3_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_QUAD23;
-			break;
-		default:
-			dev_err(dev, "Invalid SD lines\n");
-			return -EINVAL;
-		}
-		break;
-	case 3:
-		switch (cfg->sd_line_mask) {
-		case AFE_PORT_I2S_SD0_1_2_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_6CHS;
-			break;
-		default:
-			dev_err(dev, "Invalid SD lines\n");
-			return -EINVAL;
-		}
-		break;
-	case 4:
-		switch (cfg->sd_line_mask) {
-		case AFE_PORT_I2S_SD0_1_2_3_MASK:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_8CHS;
-
-			break;
-		default:
-			dev_err(dev, "Invalid SD lines\n");
-			return -EINVAL;
-		}
-		break;
-	default:
-		dev_err(dev, "Invalid SD lines\n");
-		return -EINVAL;
-	}
-
-	switch (cfg->num_channels) {
-	case 1:
-	case 2:
-		switch (pcfg->i2s_cfg.channel_mode) {
-		case AFE_PORT_I2S_QUAD01:
-		case AFE_PORT_I2S_6CHS:
-		case AFE_PORT_I2S_8CHS:
-			pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_SD0;
-			break;
-		case AFE_PORT_I2S_QUAD23:
-				pcfg->i2s_cfg.channel_mode = AFE_PORT_I2S_SD2;
-			break;
-		}
-
-		if (cfg->num_channels == 2)
-			pcfg->i2s_cfg.mono_stereo = AFE_PORT_I2S_STEREO;
-		else
-			pcfg->i2s_cfg.mono_stereo = AFE_PORT_I2S_MONO;
-
-		break;
-	case 3:
-	case 4:
-		if (pcfg->i2s_cfg.channel_mode < AFE_PORT_I2S_QUAD01) {
-			dev_err(dev, "Invalid Channel mode\n");
-			return -EINVAL;
-		}
-		break;
-	case 5:
-	case 6:
-		if (pcfg->i2s_cfg.channel_mode < AFE_PORT_I2S_6CHS) {
-			dev_err(dev, "Invalid Channel mode\n");
-			return -EINVAL;
-		}
-		break;
-	case 7:
-	case 8:
-		if (pcfg->i2s_cfg.channel_mode < AFE_PORT_I2S_8CHS) {
-			dev_err(dev, "Invalid Channel mode\n");
-			return -EINVAL;
-		}
-		break;
-	default:
-		break;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(q6afe_i2s_port_prepare);
-
 /**
  * q6afe_port_start() - Start a afe port
  *
@@ -882,37 +370,48 @@ EXPORT_SYMBOL_GPL(q6afe_i2s_port_prepare);
  */
 int q6afe_port_start(struct q6afe_port *port)
 {
-	struct afe_audioif_config_command config = {0,};
-	struct afe_port_cmd_device_start start;
+	struct afe_port_cmd_device_start *start;
 	struct q6afe *afe = port->afe;
 	int port_id = port->id;
 	int ret, param_id = port->cfg_type;
+	struct apr_pkt *pkt;
+	int pkt_size;
+	void *p;
 
-	config.pcfg = port->port_cfg;
-
-	ret  = q6afe_port_set_param_v2(port, &config, param_id,
-				       sizeof(config.pcfg));
+	ret  = q6afe_port_set_param_v2(port, &port->port_cfg, param_id,
+				       AFE_MODULE_AUDIO_DEV_INTERFACE,
+				       sizeof(port->port_cfg));
 	if (ret) {
 		dev_err(afe->dev, "AFE enable for port 0x%x failed %d\n",
 			port_id, ret);
 		return ret;
 	}
 
-	start.hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
+	pkt_size = APR_HDR_SIZE + sizeof(*start);
+	p = kzalloc(pkt_size, GFP_KERNEL);
+	if (!p)
+		return -ENOMEM;
+
+	pkt = p;
+	start = p + APR_HDR_SIZE;
+
+	pkt->hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 					    APR_HDR_LEN(APR_HDR_SIZE),
 					    APR_PKT_VER);
-	start.hdr.pkt_size = sizeof(start);
-	start.hdr.src_port = 0;
-	start.hdr.dest_port = 0;
-	start.hdr.token = port->token;
-	start.hdr.opcode = AFE_PORT_CMD_DEVICE_START;
-	start.port_id = port_id;
-
-	ret = afe_apr_send_pkt(afe, &start, port);
+	pkt->hdr.pkt_size = pkt_size;
+	pkt->hdr.src_port = 0;
+	pkt->hdr.dest_port = 0;
+	pkt->hdr.token = port->token;
+	pkt->hdr.opcode = AFE_PORT_CMD_DEVICE_START;
+
+	start->port_id = port_id;
+
+	ret = afe_apr_send_pkt(afe, pkt, port);
 	if (ret)
 		dev_err(afe->dev, "AFE enable for port 0x%x failed %d\n",
 			port_id, ret);
 
+	kfree(pkt);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(q6afe_port_start);
@@ -939,32 +438,19 @@ struct q6afe_port *q6afe_port_get_from_id(struct device *dev, int id)
 		return ERR_PTR(-EINVAL);
 	}
 
+	/* if port is multiple times bind/unbind before callback finishes */
+	port = q6afe_find_port(afe, id);
+	if (port) {
+		dev_err(dev, "AFE Port already open\n");
+		return port;
+	}
+
 	port_id = port_maps[id].port_id;
 
 	switch (port_id) {
 	case AFE_PORT_ID_MULTICHAN_HDMI_RX:
 		cfg_type = AFE_PARAM_ID_HDMI_CONFIG;
 		break;
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_0_RX:
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_1_RX:
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_2_RX:
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_3_RX:
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_4_RX:
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_5_RX:
-	case AFE_PORT_ID_SLIMBUS_MULTI_CHAN_6_RX:
-		cfg_type = AFE_PARAM_ID_SLIMBUS_CONFIG;
-		break;
-
-	case AFE_PORT_ID_PRIMARY_MI2S_RX:
-	case AFE_PORT_ID_PRIMARY_MI2S_TX:
-	case AFE_PORT_ID_SECONDARY_MI2S_RX:
-	case AFE_PORT_ID_SECONDARY_MI2S_TX:
-	case AFE_PORT_ID_TERTIARY_MI2S_RX:
-	case AFE_PORT_ID_TERTIARY_MI2S_TX:
-	case AFE_PORT_ID_QUATERNARY_MI2S_RX:
-	case AFE_PORT_ID_QUATERNARY_MI2S_TX:
-		cfg_type = AFE_PARAM_ID_I2S_CONFIG;
-		break;
 	default:
 		dev_err(dev, "Invalid port id 0x%x\n", port_id);
 		return ERR_PTR(-EINVAL);
@@ -980,6 +466,7 @@ struct q6afe_port *q6afe_port_get_from_id(struct device *dev, int id)
 	port->id = port_id;
 	port->afe = afe;
 	port->cfg_type = cfg_type;
+	kref_init(&port->refcount);
 
 	spin_lock_irqsave(&afe->port_list_lock, flags);
 	list_add_tail(&port->node, &afe->port_list);
@@ -997,13 +484,7 @@ EXPORT_SYMBOL_GPL(q6afe_port_get_from_id);
  */
 void q6afe_port_put(struct q6afe_port *port)
 {
-	struct q6afe *afe = port->afe;
-	unsigned long flags;
-
-	spin_lock_irqsave(&afe->port_list_lock, flags);
-	list_del(&port->node);
-	spin_unlock_irqrestore(&afe->port_list_lock, flags);
-	kfree(port);
+	kref_put(&port->refcount, q6afe_port_free);
 }
 EXPORT_SYMBOL_GPL(q6afe_port_put);
 
diff --git a/sound/soc/qcom/qdsp6/q6afe.h b/sound/soc/qcom/qdsp6/q6afe.h
index f21c89a25c29..3bd991a7c42d 100644
--- a/sound/soc/qcom/qdsp6/q6afe.h
+++ b/sound/soc/qcom/qdsp6/q6afe.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
+/* SPDX-License-Identifier: GPL-2.0 */
 
 #ifndef __Q6AFE_H__
 #define __Q6AFE_H__
@@ -11,139 +11,6 @@
 #define MSM_AFE_PORT_TYPE_TX 1
 #define AFE_MAX_PORTS AFE_PORT_MAX
 
-#define Q6AFE_MAX_MI2S_LINES	4
-
-#define AFE_MAX_CHAN_COUNT	8
-#define AFE_PORT_MAX_AUDIO_CHAN_CNT	0x8
-
-#define Q6AFE_LPASS_CLK_SRC_INTERNAL 1
-#define Q6AFE_LPASS_CLK_ROOT_DEFAULT 0
-
-#define LPAIF_DIG_CLK	1
-#define LPAIF_BIT_CLK	2
-#define LPAIF_OSR_CLK	3
-
-/* Clock ID for Primary I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_PRI_MI2S_IBIT                          0x100
-/* Clock ID for Primary I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_PRI_MI2S_EBIT                          0x101
-/* Clock ID for Secondary I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_SEC_MI2S_IBIT                          0x102
-/* Clock ID for Secondary I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_SEC_MI2S_EBIT                          0x103
-/* Clock ID for Tertiary I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_TER_MI2S_IBIT                          0x104
-/* Clock ID for Tertiary I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_TER_MI2S_EBIT                          0x105
-/* Clock ID for Quartnery I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_QUAD_MI2S_IBIT                         0x106
-/* Clock ID for Quartnery I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_QUAD_MI2S_EBIT                         0x107
-/* Clock ID for Speaker I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_SPEAKER_I2S_IBIT                       0x108
-/* Clock ID for Speaker I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_SPEAKER_I2S_EBIT                       0x109
-/* Clock ID for Speaker I2S OSR */
-#define Q6AFE_LPASS_CLK_ID_SPEAKER_I2S_OSR                        0x10A
-
-/* Clock ID for QUINARY  I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_QUI_MI2S_IBIT			0x10B
-/* Clock ID for QUINARY  I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_QUI_MI2S_EBIT			0x10C
-/* Clock ID for SENARY  I2S IBIT */
-#define Q6AFE_LPASS_CLK_ID_SEN_MI2S_IBIT			0x10D
-/* Clock ID for SENARY  I2S EBIT */
-#define Q6AFE_LPASS_CLK_ID_SEN_MI2S_EBIT			0x10E
-/* Clock ID for INT0 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT0_MI2S_IBIT                       0x10F
-/* Clock ID for INT1 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT1_MI2S_IBIT                       0x110
-/* Clock ID for INT2 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT2_MI2S_IBIT                       0x111
-/* Clock ID for INT3 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT3_MI2S_IBIT                       0x112
-/* Clock ID for INT4 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT4_MI2S_IBIT                       0x113
-/* Clock ID for INT5 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT5_MI2S_IBIT                       0x114
-/* Clock ID for INT6 I2S IBIT  */
-#define Q6AFE_LPASS_CLK_ID_INT6_MI2S_IBIT                       0x115
-
-/* Clock ID for QUINARY MI2S OSR CLK  */
-#define Q6AFE_LPASS_CLK_ID_QUI_MI2S_OSR                         0x116
-
-/* Clock ID for Primary PCM IBIT */
-#define Q6AFE_LPASS_CLK_ID_PRI_PCM_IBIT                           0x200
-/* Clock ID for Primary PCM EBIT */
-#define Q6AFE_LPASS_CLK_ID_PRI_PCM_EBIT                           0x201
-/* Clock ID for Secondary PCM IBIT */
-#define Q6AFE_LPASS_CLK_ID_SEC_PCM_IBIT                           0x202
-/* Clock ID for Secondary PCM EBIT */
-#define Q6AFE_LPASS_CLK_ID_SEC_PCM_EBIT                           0x203
-/* Clock ID for Tertiary PCM IBIT */
-#define Q6AFE_LPASS_CLK_ID_TER_PCM_IBIT                           0x204
-/* Clock ID for Tertiary PCM EBIT */
-#define Q6AFE_LPASS_CLK_ID_TER_PCM_EBIT                           0x205
-/* Clock ID for Quartery PCM IBIT */
-#define Q6AFE_LPASS_CLK_ID_QUAD_PCM_IBIT                          0x206
-/* Clock ID for Quartery PCM EBIT */
-#define Q6AFE_LPASS_CLK_ID_QUAD_PCM_EBIT                          0x207
-/* Clock ID for Quinary PCM IBIT */
-#define Q6AFE_LPASS_CLK_ID_QUIN_PCM_IBIT                          0x208
-/* Clock ID for Quinary PCM EBIT */
-#define Q6AFE_LPASS_CLK_ID_QUIN_PCM_EBIT                          0x209
-/* Clock ID for QUINARY PCM OSR  */
-#define Q6AFE_LPASS_CLK_ID_QUI_PCM_OSR                            0x20A
-
-/** Clock ID for Primary TDM IBIT */
-#define Q6AFE_LPASS_CLK_ID_PRI_TDM_IBIT                           0x200
-/** Clock ID for Primary TDM EBIT */
-#define Q6AFE_LPASS_CLK_ID_PRI_TDM_EBIT                           0x201
-/** Clock ID for Secondary TDM IBIT */
-#define Q6AFE_LPASS_CLK_ID_SEC_TDM_IBIT                           0x202
-/** Clock ID for Secondary TDM EBIT */
-#define Q6AFE_LPASS_CLK_ID_SEC_TDM_EBIT                           0x203
-/** Clock ID for Tertiary TDM IBIT */
-#define Q6AFE_LPASS_CLK_ID_TER_TDM_IBIT                           0x204
-/** Clock ID for Tertiary TDM EBIT */
-#define Q6AFE_LPASS_CLK_ID_TER_TDM_EBIT                           0x205
-/** Clock ID for Quartery TDM IBIT */
-#define Q6AFE_LPASS_CLK_ID_QUAD_TDM_IBIT                          0x206
-/** Clock ID for Quartery TDM EBIT */
-#define Q6AFE_LPASS_CLK_ID_QUAD_TDM_EBIT                          0x207
-/** Clock ID for Quinary TDM IBIT */
-#define Q6AFE_LPASS_CLK_ID_QUIN_TDM_IBIT                          0x208
-/** Clock ID for Quinary TDM EBIT */
-#define Q6AFE_LPASS_CLK_ID_QUIN_TDM_EBIT                          0x209
-/** Clock ID for Quinary TDM OSR */
-#define Q6AFE_LPASS_CLK_ID_QUIN_TDM_OSR                           0x20A
-
-/* Clock ID for MCLK1 */
-#define Q6AFE_LPASS_CLK_ID_MCLK_1                                 0x300
-/* Clock ID for MCLK2 */
-#define Q6AFE_LPASS_CLK_ID_MCLK_2                                 0x301
-/* Clock ID for MCLK3 */
-#define Q6AFE_LPASS_CLK_ID_MCLK_3                                 0x302
-/* Clock ID for MCLK4 */
-#define Q6AFE_LPASS_CLK_ID_MCLK_4                                 0x304
-/* Clock ID for Internal Digital Codec Core */
-#define Q6AFE_LPASS_CLK_ID_INTERNAL_DIGITAL_CODEC_CORE            0x303
-/* Clock ID for INT MCLK0 */
-#define Q6AFE_LPASS_CLK_ID_INT_MCLK_0                             0x305
-/* Clock ID for INT MCLK1 */
-#define Q6AFE_LPASS_CLK_ID_INT_MCLK_1                             0x306
-
-/* Clock attribute for invalid use (reserved for internal usage) */
-#define Q6AFE_LPASS_CLK_ATTRIBUTE_INVALID		0x0
-/* Clock attribute for no couple case */
-#define Q6AFE_LPASS_CLK_ATTRIBUTE_COUPLE_NO		0x1
-/* Clock attribute for dividend couple case */
-#define Q6AFE_LPASS_CLK_ATTRIBUTE_COUPLE_DIVIDEND	0x2
-/* Clock attribute for divisor couple case */
-#define Q6AFE_LPASS_CLK_ATTRIBUTE_COUPLE_DIVISOR	0x3
-/* Clock attribute for invert and no couple case */
-#define Q6AFE_LPASS_CLK_ATTRIBUTE_INVERT_COUPLE_NO	0x4
-
 struct q6afe_hdmi_cfg {
 	u16                  datatype;
 	u16                  channel_allocation;
@@ -151,27 +18,8 @@ struct q6afe_hdmi_cfg {
 	u16                  bit_width;
 };
 
-struct q6afe_slim_cfg {
-	u32	sample_rate;
-	u16	bit_width;
-	u16	data_format;
-	u16	num_channels;
-	u8	ch_mapping[AFE_MAX_CHAN_COUNT];
-};
-
-struct q6afe_i2s_cfg {
-	u32	sample_rate;
-	u16	bit_width;
-	u16	data_format;
-	u16	num_channels;
-	u32	sd_line_mask;
-	int fmt;
-};
-
 struct q6afe_port_config {
 	struct q6afe_hdmi_cfg hdmi;
-	struct q6afe_slim_cfg slim;
-	struct q6afe_i2s_cfg i2s_cfg;
 };
 
 struct q6afe_port;
@@ -183,11 +31,5 @@ void q6afe_port_put(struct q6afe_port *port);
 int q6afe_get_port_id(int index);
 void q6afe_hdmi_port_prepare(struct q6afe_port *port,
 			    struct q6afe_hdmi_cfg *cfg);
-void q6afe_slim_port_prepare(struct q6afe_port *port,
-			  struct q6afe_slim_cfg *cfg);
-int q6afe_i2s_port_prepare(struct q6afe_port *port, struct q6afe_i2s_cfg *cfg);
 
-int q6afe_port_set_sysclk(struct q6afe_port *port, int clk_id,
-			  int clk_src, int clk_root,
-			  unsigned int freq, int dir);
 #endif /* __Q6AFE_H__ */
-- 
2.24.1

