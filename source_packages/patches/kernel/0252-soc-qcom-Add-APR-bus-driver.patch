From f873dd4466c992ce5d17343064e4453b17a80da4 Mon Sep 17 00:00:00 2001
From: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date: Wed, 9 May 2018 13:56:13 +0100
Subject: [PATCH 252/334] soc: qcom: Add APR bus driver

This patch adds support to APR bus (Asynchronous Packet Router) driver.
APR driver is made as a bus driver so that the apr devices can added removed
more dynamically depending on the state of the services on the dsp.
APR is used for communication between application processor and QDSP to
use services on QDSP like Audio and others.

Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-and-tested-by: Rohit kumar <rohitkr@codeaurora.org>
Acked-by: Andy Gross <andy.gross@linaro.org>
Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
Signed-off-by: Mark Brown <broonie@kernel.org>

Conflicts:
	drivers/soc/qcom/Makefile
	drivers/soc/qcom/apr.c
	include/linux/soc/qcom/apr.h
---
 drivers/soc/qcom/apr.c          | 164 ++++++++++++++------------------
 include/linux/mod_devicetable.h |  11 +++
 include/linux/soc/qcom/apr.h    |  30 +++---
 3 files changed, 98 insertions(+), 107 deletions(-)

diff --git a/drivers/soc/qcom/apr.c b/drivers/soc/qcom/apr.c
index e669a6104af4..97f3622da535 100644
--- a/drivers/soc/qcom/apr.c
+++ b/drivers/soc/qcom/apr.c
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: GPL-2.0
-// Copyright (c) 2011-2017, The Linux Foundation
+// Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 // Copyright (c) 2018, Linaro Limited
 
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/device.h>
 #include <linux/spinlock.h>
-#include <linux/list.h>
+#include <linux/idr.h>
 #include <linux/slab.h>
 #include <linux/of_device.h>
 #include <linux/soc/qcom/apr.h>
@@ -17,7 +17,7 @@ struct apr {
 	struct rpmsg_endpoint *ch;
 	struct device *dev;
 	spinlock_t svcs_lock;
-	struct list_head svcs;
+	struct idr svcs_idr;
 	int dest_domain_id;
 };
 
@@ -25,11 +25,11 @@ struct apr {
  * apr_send_pkt() - Send a apr message from apr device
  *
  * @adev: Pointer to previously registered apr device.
- * @buf: Pointer to buffer to send
+ * @pkt: Pointer to apr packet to send
  *
  * Return: Will be an negative on packet size on success.
  */
-int apr_send_pkt(struct apr_device *adev, void *buf)
+int apr_send_pkt(struct apr_device *adev, struct apr_pkt *pkt)
 {
 	struct apr *apr = dev_get_drvdata(adev->dev.parent);
 	struct apr_hdr *hdr;
@@ -38,23 +38,16 @@ int apr_send_pkt(struct apr_device *adev, void *buf)
 
 	spin_lock_irqsave(&adev->lock, flags);
 
-	hdr = (struct apr_hdr *)buf;
+	hdr = &pkt->hdr;
 	hdr->src_domain = APR_DOMAIN_APPS;
 	hdr->src_svc = adev->svc_id;
 	hdr->dest_domain = adev->domain_id;
 	hdr->dest_svc = adev->svc_id;
 
-	ret = rpmsg_send(apr->ch, buf, hdr->pkt_size);
-	if (ret) {
-		dev_err(&adev->dev, "Unable to send APR pkt %d\n",
-			hdr->pkt_size);
-	} else {
-		ret = hdr->pkt_size;
-	}
-
+	ret = rpmsg_trysend(apr->ch, pkt, hdr->pkt_size);
 	spin_unlock_irqrestore(&adev->lock, flags);
 
-	return ret;
+	return ret ? ret : hdr->pkt_size;
 }
 EXPORT_SYMBOL_GPL(apr_send_pkt);
 
@@ -69,14 +62,12 @@ static int apr_callback(struct rpmsg_device *rpdev, void *buf,
 				  int len, void *priv, u32 addr)
 {
 	struct apr *apr = dev_get_drvdata(&rpdev->dev);
-	struct apr_client_message data;
-	struct apr_device *p, *c_svc = NULL;
+	uint16_t hdr_size, msg_type, ver, svc_id;
+	struct apr_device *svc = NULL;
 	struct apr_driver *adrv = NULL;
+	struct apr_resp_pkt resp;
 	struct apr_hdr *hdr;
-	uint16_t hdr_size;
-	uint16_t msg_type;
-	uint16_t ver;
-	uint16_t svc;
+	unsigned long flags;
 
 	if (len <= APR_HDR_SIZE) {
 		dev_err(apr->dev, "APR: Improper apr pkt received:%p %d\n",
@@ -95,7 +86,7 @@ static int apr_callback(struct rpmsg_device *rpdev, void *buf,
 		return -EINVAL;
 	}
 
-	if (hdr->pkt_size < APR_HDR_SIZE) {
+	if (hdr->pkt_size < APR_HDR_SIZE || hdr->pkt_size != len) {
 		dev_err(apr->dev, "APR: Wrong paket size\n");
 		return -EINVAL;
 	}
@@ -114,34 +105,29 @@ static int apr_callback(struct rpmsg_device *rpdev, void *buf,
 		return -EINVAL;
 	}
 
-	svc = hdr->dest_svc;
-	spin_lock(&apr->svcs_lock);
-	list_for_each_entry(p, &apr->svcs, node) {
-		if (svc == p->svc_id) {
-			c_svc = p;
-			if (c_svc->dev.driver)
-				adrv = to_apr_driver(c_svc->dev.driver);
-			break;
-		}
-	}
-	spin_unlock(&apr->svcs_lock);
+	svc_id = hdr->dest_svc;
+	spin_lock_irqsave(&apr->svcs_lock, flags);
+	svc = idr_find(&apr->svcs_idr, svc_id);
+	if (svc && svc->dev.driver)
+		adrv = to_apr_driver(svc->dev.driver);
+	spin_unlock_irqrestore(&apr->svcs_lock, flags);
 
 	if (!adrv) {
 		dev_err(apr->dev, "APR: service is not registered\n");
 		return -EINVAL;
 	}
 
-	data.payload_size = hdr->pkt_size - hdr_size;
-	data.opcode = hdr->opcode;
-	data.src_port = hdr->src_port;
-	data.dest_port = hdr->dest_port;
-	data.token = hdr->token;
-	data.msg_type = msg_type;
+	resp.hdr = *hdr;
+	resp.payload_size = hdr->pkt_size - hdr_size;
 
-	if (data.payload_size > 0)
-		data.payload = buf + hdr_size;
+	/*
+	 * NOTE: hdr_size is not same as APR_HDR_SIZE as remote can include
+	 * optional headers in to apr_hdr which should be ignored
+	 */
+	if (resp.payload_size > 0)
+		resp.payload = buf + hdr_size;
 
-	adrv->callback(c_svc, &data);
+	adrv->callback(svc, &resp);
 
 	return 0;
 }
@@ -188,7 +174,7 @@ static int apr_device_remove(struct device *dev)
 		if (adrv->remove)
 			adrv->remove(adev);
 		spin_lock(&apr->svcs_lock);
-		list_del(&adev->node);
+		idr_remove(&apr->svcs_idr, adev->svc_id);
 		spin_unlock(&apr->svcs_lock);
 	}
 
@@ -198,30 +184,30 @@ static int apr_device_remove(struct device *dev)
 static int apr_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
 	struct apr_device *adev = to_apr_device(dev);
-        int ret;
+	int ret;
 
-        ret = of_device_uevent_modalias(dev, env);
-        if (ret != -ENODEV)
-                return ret;
+	ret = of_device_uevent_modalias(dev, env);
+	if (ret != -ENODEV)
+		return ret;
 
-        return add_uevent_var(env, "MODALIAS= apr:%s", adev->name);
+	return add_uevent_var(env, "MODALIAS=apr:%s", adev->name);
 }
 
-struct bus_type aprbus_type = {
+struct bus_type aprbus = {
 	.name		= "aprbus",
 	.match		= apr_device_match,
 	.probe		= apr_device_probe,
 	.uevent		= apr_uevent,
 	.remove		= apr_device_remove,
-	.force_dma	= true,
 };
-EXPORT_SYMBOL_GPL(aprbus_type);
+EXPORT_SYMBOL_GPL(aprbus);
 
 static int apr_add_device(struct device *dev, struct device_node *np,
-			  const struct apr_device_id *id, bool is_svc)
+			  const struct apr_device_id *id)
 {
 	struct apr *apr = dev_get_drvdata(dev);
 	struct apr_device *adev = NULL;
+	int ret;
 
 	adev = kzalloc(sizeof(*adev), GFP_KERNEL);
 	if (!adev)
@@ -229,30 +215,37 @@ static int apr_add_device(struct device *dev, struct device_node *np,
 
 	spin_lock_init(&adev->lock);
 
-	if (is_svc) {
-		adev->svc_id = id->svc_id;
-		adev->domain_id = id->domain_id;
-		adev->version = id->svc_version;
+	adev->svc_id = id->svc_id;
+	adev->domain_id = id->domain_id;
+	adev->version = id->svc_version;
+	if (np)
+		strncpy(adev->name, np->name, APR_NAME_SIZE);
+	else
 		strncpy(adev->name, id->name, APR_NAME_SIZE);
-		dev_set_name(&adev->dev, "aprsvc:%s:%x:%x", id->name,
-			     id->domain_id, id->svc_id);
-	} else  {
-		dev_set_name(&adev->dev, "%s:%s", dev_name(dev), np->name);
-	}
 
-	adev->dev.bus = &aprbus_type;
+	dev_set_name(&adev->dev, "aprsvc:%s:%x:%x", adev->name,
+		     id->domain_id, id->svc_id);
+
+	adev->dev.bus = &aprbus;
 	adev->dev.parent = dev;
 	adev->dev.of_node = np;
 	adev->dev.release = apr_dev_release;
 	adev->dev.driver = NULL;
 
 	spin_lock(&apr->svcs_lock);
-	list_add_tail(&adev->node, &apr->svcs);
+	idr_alloc(&apr->svcs_idr, adev, id->svc_id,
+		  id->svc_id + 1, GFP_ATOMIC);
 	spin_unlock(&apr->svcs_lock);
 
 	dev_info(dev, "Adding APR dev: %s\n", dev_name(&adev->dev));
 
-	return device_register(&adev->dev);
+	ret = device_register(&adev->dev);
+	if (ret) {
+		dev_err(dev, "device_register failed: %d\n", ret);
+		put_device(&adev->dev);
+	}
+
+	return ret;
 }
 
 static void of_register_apr_devices(struct device *dev)
@@ -261,25 +254,15 @@ static void of_register_apr_devices(struct device *dev)
 	struct device_node *node;
 
 	for_each_child_of_node(dev->of_node, node) {
-		struct apr_device_id id = {0};
-		const char *svc_name;
-		bool is_svc = false;
-
-		if (of_find_property(node, "qcom,apr-svc-id", NULL) &&
-		    of_find_property(node, "qcom,apr-svc-name", NULL)) {
-			/* svc node */
-			of_property_read_u32(node, "qcom,apr-svc-id",
-					     &id.svc_id);
-			of_property_read_string(node, "qcom,apr-svc-name",
-						&svc_name);
-			id.domain_id = apr->dest_domain_id;
-
-			memcpy(id.name, svc_name, strlen(svc_name) + 1);
-			is_svc = true;
-		}
-
-		if (apr_add_device(dev, node, &id, is_svc))
-			dev_err(dev, "Failed to add arp %s svc\n", svc_name);
+		struct apr_device_id id = { {0} };
+
+		if (of_property_read_u32(node, "reg", &id.svc_id))
+			continue;
+
+		id.domain_id = apr->dest_domain_id;
+
+		if (apr_add_device(dev, node, &id))
+			dev_err(dev, "Failed to add apr %d svc\n", id.svc_id);
 	}
 }
 
@@ -293,8 +276,7 @@ static int apr_probe(struct rpmsg_device *rpdev)
 	if (!apr)
 		return -ENOMEM;
 
-	ret = of_property_read_u32(dev->of_node, "qcom,apr-dest-domain-id",
-				   &apr->dest_domain_id);
+	ret = of_property_read_u32(dev->of_node, "reg", &apr->dest_domain_id);
 	if (ret) {
 		dev_err(dev, "APR Domain ID not specified in DT\n");
 		return ret;
@@ -303,8 +285,8 @@ static int apr_probe(struct rpmsg_device *rpdev)
 	dev_set_drvdata(dev, apr);
 	apr->ch = rpdev->ept;
 	apr->dev = dev;
-	INIT_LIST_HEAD(&apr->svcs);
-
+	spin_lock_init(&apr->svcs_lock);
+	idr_init(&apr->svcs_idr);
 	of_register_apr_devices(dev);
 
 	return 0;
@@ -335,7 +317,7 @@ static void apr_remove(struct rpmsg_device *rpdev)
  */
 int __apr_driver_register(struct apr_driver *drv, struct module *owner)
 {
-	drv->driver.bus = &aprbus_type;
+	drv->driver.bus = &aprbus;
 	drv->driver.owner = owner;
 
 	return driver_register(&drv->driver);
@@ -374,16 +356,18 @@ static int __init apr_init(void)
 {
 	int ret;
 
-	ret = bus_register(&aprbus_type);
+	ret = bus_register(&aprbus);
 	if (!ret)
 		ret = register_rpmsg_driver(&apr_driver);
+	else
+		bus_unregister(&aprbus);
 
 	return ret;
 }
 
 static void __exit apr_exit(void)
 {
-	bus_unregister(&aprbus_type);
+	bus_unregister(&aprbus);
 	unregister_rpmsg_driver(&apr_driver);
 }
 
diff --git a/include/linux/mod_devicetable.h b/include/linux/mod_devicetable.h
index 48e188327c02..f0341c75a542 100644
--- a/include/linux/mod_devicetable.h
+++ b/include/linux/mod_devicetable.h
@@ -465,6 +465,17 @@ struct slim_device_id {
 	kernel_ulong_t driver_data;
 };
 
+#define APR_NAME_SIZE	32
+#define APR_MODULE_PREFIX "apr:"
+
+struct apr_device_id {
+	char name[APR_NAME_SIZE];
+	__u32 domain_id;
+	__u32 svc_id;
+	__u32 svc_version;
+	kernel_ulong_t driver_data;	/* Data private to the driver */
+};
+
 #define SPMI_NAME_SIZE	32
 #define SPMI_MODULE_PREFIX "spmi:"
 
diff --git a/include/linux/soc/qcom/apr.h b/include/linux/soc/qcom/apr.h
index 604ea7f36a69..c5d52e2cb275 100644
--- a/include/linux/soc/qcom/apr.h
+++ b/include/linux/soc/qcom/apr.h
@@ -1,8 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2011-2017, The Linux Foundation
- * Copyright (c) 2018, Linaro Limited
- */
+/* SPDX-License-Identifier: GPL-2.0 */
 
 #ifndef __QCOM_APR_H_
 #define __QCOM_APR_H_
@@ -12,6 +8,8 @@
 #include <linux/mod_devicetable.h>
 #include <dt-bindings/soc/qcom,apr.h>
 
+extern struct bus_type aprbus;
+
 #define APR_HDR_LEN(hdr_len) ((hdr_len)/4)
 
 /*
@@ -64,19 +62,17 @@ struct apr_hdr {
 	uint16_t dest_port;
 	uint32_t token;
 	uint32_t opcode;
+} __packed;
+
+struct apr_pkt {
+	struct apr_hdr hdr;
+	uint8_t payload[];
 };
 
-struct apr_client_message {
-	uint16_t payload_size;
-	uint16_t hdr_len;
-	uint16_t msg_type;
-	uint16_t src;
-	uint16_t dest_svc;
-	uint16_t src_port;
-	uint16_t dest_port;
-	uint32_t token;
-	uint32_t opcode;
+struct apr_resp_pkt {
+	struct apr_hdr hdr;
 	void *payload;
+	int payload_size;
 };
 
 /* Bits 0 to 15 -- Minor version,  Bits 16 to 31 -- Major version */
@@ -99,7 +95,7 @@ struct apr_driver {
 	int	(*probe)(struct apr_device *sl);
 	int	(*remove)(struct apr_device *sl);
 	int	(*callback)(struct apr_device *a,
-			    struct apr_client_message *d);
+			    struct apr_resp_pkt *d);
 	struct device_driver		driver;
 	const struct apr_device_id	*id_table;
 };
@@ -127,6 +123,6 @@ void apr_driver_unregister(struct apr_driver *drv);
 	module_driver(__apr_driver, apr_driver_register, \
 			apr_driver_unregister)
 
-int apr_send_pkt(struct apr_device *adev, void *buf);
+int apr_send_pkt(struct apr_device *adev, struct apr_pkt *pkt);
 
 #endif /* __QCOM_APR_H_ */
-- 
2.24.1

