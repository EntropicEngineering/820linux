From 9aaf8f62944cfbe1eff60f9cc9f1732aeee61d54 Mon Sep 17 00:00:00 2001
From: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date: Fri, 18 May 2018 13:56:00 +0100
Subject: [PATCH 021/334] ASoC: qdsp6: q6adm: Add q6adm driver

This patch adds support to Q6ADM (Audio Device Manager) module in
q6dsp. ADM performs routing between audio streams and AFE ports.
It does Rate matching for streams going to devices driven by
different clocks, it handles volume ramping, Mixing with channel
and bit-width. ADM creates and destroys dynamic COPP services
for device-related audio processing as needed.

This patch adds basic support to ADM.

Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-and-tested-by: Rohit kumar <rohitkr@codeaurora.org>
Reviewed-by: Banajit Goswami <bgoswami@codeaurora.org>
Signed-off-by: Mark Brown <broonie@kernel.org>

Conflicts:
	sound/soc/qcom/qdsp6/q6adm.c
	sound/soc/qcom/qdsp6/q6adm.h
---
 sound/soc/qcom/Kconfig        |   4 +
 sound/soc/qcom/qdsp6/Makefile |   1 +
 sound/soc/qcom/qdsp6/q6adm.c  | 387 ++++++++++++++++------------------
 sound/soc/qcom/qdsp6/q6adm.h  |  12 +-
 4 files changed, 197 insertions(+), 207 deletions(-)

diff --git a/sound/soc/qcom/Kconfig b/sound/soc/qcom/Kconfig
index bb0a2afb0563..971127edbc23 100644
--- a/sound/soc/qcom/Kconfig
+++ b/sound/soc/qcom/Kconfig
@@ -50,12 +50,16 @@ config SND_SOC_QDSP6_CORE
 config SND_SOC_QDSP6_AFE
 	tristate
 
+config SND_SOC_QDSP6_ADM
+	tristate
+
 config SND_SOC_QDSP6
 	tristate "SoC ALSA audio driver for QDSP6"
 	depends on QCOM_APR && HAS_DMA
 	select SND_SOC_QDSP6_COMMON
 	select SND_SOC_QDSP6_CORE
 	select SND_SOC_QDSP6_AFE
+	select SND_SOC_QDSP6_ADM
 	help
 	 To add support for MSM QDSP6 Soc Audio.
 	 This will enable sound soc platform specific
diff --git a/sound/soc/qcom/qdsp6/Makefile b/sound/soc/qcom/qdsp6/Makefile
index 7ff666bd10ca..95cdb3a12694 100644
--- a/sound/soc/qcom/qdsp6/Makefile
+++ b/sound/soc/qcom/qdsp6/Makefile
@@ -1,3 +1,4 @@
 obj-$(CONFIG_SND_SOC_QDSP6_COMMON) += q6dsp-common.o
 obj-$(CONFIG_SND_SOC_QDSP6_CORE) += q6core.o
 obj-$(CONFIG_SND_SOC_QDSP6_AFE) += q6afe.o
+obj-$(CONFIG_SND_SOC_QDSP6_ADM) += q6adm.o
diff --git a/sound/soc/qcom/qdsp6/q6adm.c b/sound/soc/qcom/qdsp6/q6adm.c
index 977b187e59ca..9983c665a941 100644
--- a/sound/soc/qcom/qdsp6/q6adm.c
+++ b/sound/soc/qcom/qdsp6/q6adm.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
-// Copyright (c) 2011-2017, The Linux Foundation
+// Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 // Copyright (c) 2018, Linaro Limited
 
 #include <linux/slab.h>
@@ -35,7 +35,7 @@
 #define ADM_MATRIX_ID_AUDIO_RX		0
 #define ADM_MATRIX_ID_AUDIO_TX		1
 
-struct copp {
+struct q6copp {
 	int afe_port;
 	int copp_idx;
 	int id;
@@ -64,12 +64,10 @@ struct q6adm {
 	struct aprv2_ibasic_rsp_result_t result;
 	struct mutex lock;
 	wait_queue_head_t matrix_map_wait;
-	void *routing_data;
 	struct platform_device *pdev_routing;
 };
 
-struct adm_cmd_device_open_v5 {
-	struct apr_hdr hdr;
+struct q6adm_cmd_device_open_v5 {
 	u16 flags;
 	u16 mode_of_operation;
 	u16 endpoint_id_1;
@@ -81,60 +79,76 @@ struct adm_cmd_device_open_v5 {
 	u8 dev_channel_mapping[8];
 } __packed;
 
-struct adm_cmd_matrix_map_routings_v5 {
-	struct apr_hdr hdr;
+struct q6adm_cmd_matrix_map_routings_v5 {
 	u32 matrix_id;
 	u32 num_sessions;
 } __packed;
 
-struct adm_session_map_node_v5 {
+struct q6adm_session_map_node_v5 {
 	u16 session_id;
 	u16 num_copps;
 } __packed;
 
-static struct copp *adm_find_copp(struct q6adm *adm, int port_idx,
+static struct q6copp *q6adm_find_copp(struct q6adm *adm, int port_idx,
 				  int copp_idx)
 {
-	struct copp *c = NULL;
+	struct q6copp *c = NULL;
+	struct q6copp *ret = NULL;
 	unsigned long flags;
 
 	spin_lock_irqsave(&adm->copps_list_lock, flags);
 	list_for_each_entry(c, &adm->copps_list, node) {
-		if ((port_idx == c->afe_port) && (copp_idx == c->copp_idx))
+		if ((port_idx == c->afe_port) && (copp_idx == c->copp_idx)) {
+			ret = c;
+			kref_get(&c->refcount);
 			break;
+		}
 	}
 
 	spin_unlock_irqrestore(&adm->copps_list_lock, flags);
 
-	return c;
+	return ret;
 
 }
 
-static int q6adm_callback(struct apr_device *adev,
-			struct apr_client_message *data)
+static void q6adm_free_copp(struct kref *ref)
+{
+	struct q6copp *c = container_of(ref, struct q6copp, refcount);
+	struct q6adm *adm = c->adm;
+	unsigned long flags;
+
+	spin_lock_irqsave(&adm->copps_list_lock, flags);
+	clear_bit(c->copp_idx, &adm->copp_bitmap[c->afe_port]);
+	list_del(&c->node);
+	spin_unlock_irqrestore(&adm->copps_list_lock, flags);
+	kfree(c);
+}
+
+static int q6adm_callback(struct apr_device *adev, struct apr_resp_pkt *data)
 {
 	struct aprv2_ibasic_rsp_result_t *result = data->payload;
 	int port_idx, copp_idx;
-	struct copp *copp;
+	struct apr_hdr *hdr = &data->hdr;
+	struct q6copp *copp;
 	struct q6adm *adm = dev_get_drvdata(&adev->dev);
 
 	if (!data->payload_size)
 		return 0;
 
-	copp_idx = (data->token) & 0XFF;
-	port_idx = ((data->token) >> 16) & 0xFF;
+	copp_idx = (hdr->token) & 0XFF;
+	port_idx = ((hdr->token) >> 16) & 0xFF;
 	if (port_idx < 0 || port_idx >= AFE_MAX_PORTS) {
 		dev_err(&adev->dev, "Invalid port idx %d token %d\n",
-		       port_idx, data->token);
+		       port_idx, hdr->token);
 		return 0;
 	}
 	if (copp_idx < 0 || copp_idx >= MAX_COPPS_PER_PORT) {
 		dev_err(&adev->dev, "Invalid copp idx %d token %d\n",
-			copp_idx, data->token);
+			copp_idx, hdr->token);
 		return 0;
 	}
 
-	switch (data->opcode) {
+	switch (hdr->opcode) {
 	case APR_BASIC_RSP_RESULT: {
 		if (result->status != 0) {
 			dev_err(&adev->dev, "cmd = 0x%x return error = 0x%x\n",
@@ -143,12 +157,13 @@ static int q6adm_callback(struct apr_device *adev,
 		switch (result->opcode) {
 		case ADM_CMD_DEVICE_OPEN_V5:
 		case ADM_CMD_DEVICE_CLOSE_V5:
-			copp = adm_find_copp(adm, port_idx, copp_idx);
+			copp = q6adm_find_copp(adm, port_idx, copp_idx);
 			if (!copp)
 				return 0;
 
 			copp->result = *result;
 			wake_up(&copp->wait);
+			kref_put(&copp->refcount, q6adm_free_copp);
 			break;
 		case ADM_CMD_MATRIX_MAP_ROUTINGS_V5:
 			adm->result = *result;
@@ -169,8 +184,7 @@ static int q6adm_callback(struct apr_device *adev,
 			u16 reserved;
 		} __packed * open = data->payload;
 
-		open = data->payload;
-		copp = adm_find_copp(adm, port_idx, copp_idx);
+		copp = q6adm_find_copp(adm, port_idx, copp_idx);
 		if (!copp)
 			return 0;
 
@@ -179,25 +193,27 @@ static int q6adm_callback(struct apr_device *adev,
 				open->copp_id);
 			copp->result.status = ADSP_EBADPARAM;
 			wake_up(&copp->wait);
+			kref_put(&copp->refcount, q6adm_free_copp);
 			break;
 		}
-		copp->result.opcode = data->opcode;
+		copp->result.opcode = hdr->opcode;
 		copp->id = open->copp_id;
 		wake_up(&copp->wait);
+		kref_put(&copp->refcount, q6adm_free_copp);
 	}
 	break;
 	default:
 		dev_err(&adev->dev, "Unknown cmd:0x%x\n",
-		       data->opcode);
+		       hdr->opcode);
 		break;
 	}
 
 	return 0;
 }
 
-static struct copp *adm_alloc_copp(struct q6adm *adm, int port_idx)
+static struct q6copp *q6adm_alloc_copp(struct q6adm *adm, int port_idx)
 {
-	struct copp *c;
+	struct q6copp *c;
 	int idx;
 
 	idx = find_first_zero_bit(&adm->copp_bitmap[port_idx],
@@ -206,7 +222,7 @@ static struct copp *adm_alloc_copp(struct q6adm *adm, int port_idx)
 	if (idx > MAX_COPPS_PER_PORT)
 		return ERR_PTR(-EBUSY);
 
-	c = kzalloc(sizeof(*c), GFP_KERNEL);
+	c = kzalloc(sizeof(*c), GFP_ATOMIC);
 	if (!c)
 		return ERR_PTR(-ENOMEM);
 
@@ -220,18 +236,17 @@ static struct copp *adm_alloc_copp(struct q6adm *adm, int port_idx)
 	return c;
 }
 
-static int q6adm_apr_send_copp_pkt(struct q6adm *adm, struct copp *copp,
-				   void *data, uint32_t rsp_opcode)
+static int q6adm_apr_send_copp_pkt(struct q6adm *adm, struct q6copp *copp,
+				   struct apr_pkt *pkt, uint32_t rsp_opcode)
 {
 	struct device *dev = adm->dev;
-	struct apr_hdr *hdr = data;
-	uint32_t opcode = hdr->opcode;
+	uint32_t opcode = pkt->hdr.opcode;
 	int ret;
 
 	mutex_lock(&adm->lock);
 	copp->result.opcode = 0;
 	copp->result.status = 0;
-	ret = apr_send_pkt(adm->apr, data);
+	ret = apr_send_pkt(adm->apr, pkt);
 	if (ret < 0) {
 		dev_err(dev, "Failed to send APR packet\n");
 		ret = -EINVAL;
@@ -251,7 +266,7 @@ static int q6adm_apr_send_copp_pkt(struct q6adm *adm, struct copp *copp,
 
 	if (!ret) {
 		dev_err(dev, "ADM copp cmd timedout\n");
-		ret = -EINVAL;
+		ret = -ETIMEDOUT;
 	} else if (copp->result.status > 0) {
 		dev_err(dev, "DSP returned error[%d]\n",
 			copp->result.status);
@@ -263,54 +278,32 @@ static int q6adm_apr_send_copp_pkt(struct q6adm *adm, struct copp *copp,
 	return ret;
 }
 
-static int q6adm_device_close(struct q6adm *adm, struct copp *copp,
+static int q6adm_device_close(struct q6adm *adm, struct q6copp *copp,
 			      int port_id, int copp_idx)
 {
-	struct apr_hdr close = {0};
+	struct apr_pkt close;
 
-	close.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
+	close.hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 					APR_HDR_LEN(APR_HDR_SIZE),
 					APR_PKT_VER);
-	close.pkt_size = sizeof(close);
-	close.src_svc = APR_SVC_ADM;
-	close.src_domain = APR_DOMAIN_APPS;
-	close.src_port = port_id;
-	close.dest_svc = APR_SVC_ADM;
-	close.dest_domain = APR_DOMAIN_ADSP;
-	close.dest_port = copp->id;
-	close.token = port_id << 16 | copp_idx;
-	close.opcode = ADM_CMD_DEVICE_CLOSE_V5;
+	close.hdr.pkt_size = sizeof(close);
+	close.hdr.src_port = port_id;
+	close.hdr.dest_port = copp->id;
+	close.hdr.token = port_id << 16 | copp_idx;
+	close.hdr.opcode = ADM_CMD_DEVICE_CLOSE_V5;
 
 	return q6adm_apr_send_copp_pkt(adm, copp, &close, 0);
 }
 
-static void adm_free_copp(struct kref *ref)
+static struct q6copp *q6adm_find_matching_copp(struct q6adm *adm,
+					       int port_id, int topology,
+					       int mode, int rate,
+					       int channel_mode, int bit_width,
+					       int app_type)
 {
-	struct copp *c = container_of(ref, struct copp, refcount);
-	struct q6adm *adm = c->adm;
-	int port_idx = c->afe_port;
-	int copp_idx = c->copp_idx;
+	struct q6copp *c = NULL;
+	struct q6copp *ret = NULL;
 	unsigned long flags;
-	int ret;
-
-	ret = q6adm_device_close(adm, c, port_idx, copp_idx);
-	if (ret < 0)
-		dev_err(adm->dev, "Failed to close copp %d\n", ret);
-
-	clear_bit(c->copp_idx, &adm->copp_bitmap[port_idx]);
-	spin_lock_irqsave(&adm->copps_list_lock, flags);
-	list_del(&c->node);
-	spin_unlock_irqrestore(&adm->copps_list_lock, flags);
-	kfree(c);
-}
-
-static struct copp *adm_find_matching_copp(struct q6adm *adm,
-					   int port_id, int topology,
-					   int mode, int rate, int channel_mode,
-					   int bit_width, int app_type)
-{
-	unsigned long flags;
-	struct copp *c;
 
 	spin_lock_irqsave(&adm->copps_list_lock, flags);
 
@@ -318,68 +311,59 @@ static struct copp *adm_find_matching_copp(struct q6adm *adm,
 		if ((port_id == c->afe_port) && (topology == c->topology) &&
 		    (mode == c->mode) && (rate == c->rate) &&
 		    (bit_width == c->bit_width) && (app_type == c->app_type)) {
-			spin_unlock_irqrestore(&adm->copps_list_lock, flags);
+			ret = c;
 			kref_get(&c->refcount);
-			return c;
 		}
 	}
 	spin_unlock_irqrestore(&adm->copps_list_lock, flags);
 
-	c = adm_alloc_copp(adm, port_id);
-	if (IS_ERR_OR_NULL(c))
-		return ERR_CAST(c);
-
-	kref_init(&c->refcount);
-	c->topology = topology;
-	c->mode = mode;
-	c->rate = rate;
-	c->channels = channel_mode;
-	c->bit_width = bit_width;
-	c->app_type = app_type;
-
-	spin_lock_irqsave(&adm->copps_list_lock, flags);
-	list_add_tail(&c->node, &adm->copps_list);
-	spin_unlock_irqrestore(&adm->copps_list_lock, flags);
-
-	return c;
-
+	return ret;
 }
 
-static int q6adm_device_open(struct q6adm *adm, struct copp *copp, int port_id,
-			     int path, int topology, int channel_mode,
-			     int bit_width, int rate)
+static int q6adm_device_open(struct q6adm *adm, struct q6copp *copp,
+			     int port_id, int path, int topology,
+			     int channel_mode, int bit_width, int rate)
 {
-	struct adm_cmd_device_open_v5 open = {0,};
+	struct q6adm_cmd_device_open_v5 *open;
 	int afe_port = q6afe_get_port_id(port_id);
-	int ret;
+	struct apr_pkt *pkt;
+	void *p;
+	int ret, pkt_size;
+
+	pkt_size = APR_HDR_SIZE + sizeof(*open);
+	p = kzalloc(pkt_size, GFP_KERNEL);
+	if (!p)
+		return -ENOMEM;
 
-	open.hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
+	pkt = p;
+	open = p + APR_HDR_SIZE;
+	pkt->hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 					   APR_HDR_LEN(APR_HDR_SIZE),
 					   APR_PKT_VER);
-	open.hdr.pkt_size = sizeof(open);
-	open.hdr.src_svc = APR_SVC_ADM;
-	open.hdr.src_domain = APR_DOMAIN_APPS;
-	open.hdr.src_port = afe_port;
-	open.hdr.dest_svc = APR_SVC_ADM;
-	open.hdr.dest_domain = APR_DOMAIN_ADSP;
-	open.hdr.dest_port = afe_port;
-	open.hdr.token = port_id << 16 | copp->copp_idx;
-	open.hdr.opcode = ADM_CMD_DEVICE_OPEN_V5;
-	open.flags = ADM_LEGACY_DEVICE_SESSION;
-	open.mode_of_operation = path;
-	open.endpoint_id_1 = afe_port;
-	open.topology_id = topology;
-	open.dev_num_channel = channel_mode & 0x00FF;
-	open.bit_width = bit_width;
-	open.sample_rate = rate;
-
-	ret = q6dsp_map_channels(&open.dev_channel_mapping[0],
+	pkt->hdr.pkt_size = pkt_size;
+	pkt->hdr.src_port = afe_port;
+	pkt->hdr.dest_port = afe_port;
+	pkt->hdr.token = port_id << 16 | copp->copp_idx;
+	pkt->hdr.opcode = ADM_CMD_DEVICE_OPEN_V5;
+	open->flags = ADM_LEGACY_DEVICE_SESSION;
+	open->mode_of_operation = path;
+	open->endpoint_id_1 = afe_port;
+	open->topology_id = topology;
+	open->dev_num_channel = channel_mode & 0x00FF;
+	open->bit_width = bit_width;
+	open->sample_rate = rate;
+
+	ret = q6dsp_map_channels(&open->dev_channel_mapping[0],
 				 channel_mode);
 	if (ret)
-		return ret;
+		goto err;
+
+	ret = q6adm_apr_send_copp_pkt(adm, copp, pkt,
+				      ADM_CMDRSP_DEVICE_OPEN_V5);
 
-	return q6adm_apr_send_copp_pkt(adm, copp, &open,
-				       ADM_CMDRSP_DEVICE_OPEN_V5);
+err:
+	kfree(pkt);
+	return ret;
 }
 
 /**
@@ -396,64 +380,74 @@ static int q6adm_device_open(struct q6adm *adm, struct copp *copp, int port_id,
  * @app_type: Application type.
  * @acdb_id: ACDB id
  *
- * Return: Will be an negative on error or a valid copp index on success.
+ * Return: Will be an negative on error or a valid copp pointer on success.
  */
-int q6adm_open(struct device *dev, int port_id, int path, int rate,
+struct q6copp *q6adm_open(struct device *dev, int port_id, int path, int rate,
 	       int channel_mode, int topology, int perf_mode,
 	       uint16_t bit_width, int app_type, int acdb_id)
 {
 	struct q6adm *adm = dev_get_drvdata(dev->parent);
-	struct copp *copp;
+	struct q6copp *copp;
+	unsigned long flags;
 	int ret = 0;
 
 	if (port_id < 0) {
 		dev_err(dev, "Invalid port_id 0x%x\n", port_id);
-		return -EINVAL;
+		return ERR_PTR(-EINVAL);
 	}
 
-	copp = adm_find_matching_copp(adm, port_id, topology, perf_mode,
+	copp = q6adm_find_matching_copp(adm, port_id, topology, perf_mode,
 				      rate, channel_mode, bit_width, app_type);
-	if (kref_read(&copp->refcount) == 1) {
-		/* not initialized yet */
-		ret = q6adm_device_open(adm, copp, port_id, path, topology,
-				  channel_mode, bit_width, rate);
-		if (ret < 0)
-			return ret;
+	if (copp) {
+		dev_err(dev, "Found Matching Copp 0x%x\n", copp->copp_idx);
+		return copp;
 	}
 
-	return copp->copp_idx;
-}
-EXPORT_SYMBOL_GPL(q6adm_open);
+	spin_lock_irqsave(&adm->copps_list_lock, flags);
+	copp = q6adm_alloc_copp(adm, port_id);
+	if (IS_ERR_OR_NULL(copp)) {
+		spin_unlock_irqrestore(&adm->copps_list_lock, flags);
+		return ERR_CAST(copp);
+	}
 
-/**
- * q6adm_set_routing_data() - set routing private data
- *
- * @dev: Pointer to adm device.
- * @data: routing private data
- *
- */
-void q6adm_set_routing_data(struct device *dev, void *data)
-{
-	struct q6adm *adm = dev_get_drvdata(dev->parent);
+	list_add_tail(&copp->node, &adm->copps_list);
+	spin_unlock_irqrestore(&adm->copps_list_lock, flags);
 
-	adm->routing_data = data;
+	kref_init(&copp->refcount);
+	copp->topology = topology;
+	copp->mode = perf_mode;
+	copp->rate = rate;
+	copp->channels = channel_mode;
+	copp->bit_width = bit_width;
+	copp->app_type = app_type;
+
+
+	ret = q6adm_device_open(adm, copp, port_id, path, topology,
+				channel_mode, bit_width, rate);
+	if (ret < 0) {
+		kref_put(&copp->refcount, q6adm_free_copp);
+		return ERR_PTR(ret);
+	}
+
+	return copp;
 }
-EXPORT_SYMBOL_GPL(q6adm_set_routing_data);
+EXPORT_SYMBOL_GPL(q6adm_open);
 
 /**
- * q6adm_get_routing_data() - get routing private data
+ * q6adm_get_copp_id() - get copp index
  *
- * @dev: Pointer to adm device.
+ * @copp: Pointer to valid copp
  *
- * Return: pointer to routing private data
- */
-void *q6adm_get_routing_data(struct device *dev)
+ * Return: Will be an negative on error or a valid copp index on success.
+ **/
+int q6adm_get_copp_id(struct q6copp *copp)
 {
-	struct q6adm *adm = dev_get_drvdata(dev->parent);
+	if (!copp)
+		return -EINVAL;
 
-	return adm->routing_data;
+	return copp->copp_idx;
 }
-EXPORT_SYMBOL_GPL(q6adm_get_routing_data);
+EXPORT_SYMBOL_GPL(q6adm_get_copp_id);
 
 /**
  * q6adm_matrix_map() - Map asm streams and afe ports using payload
@@ -469,32 +463,33 @@ int q6adm_matrix_map(struct device *dev, int path,
 		     struct route_payload payload_map, int perf_mode)
 {
 	struct q6adm *adm = dev_get_drvdata(dev->parent);
-	struct adm_cmd_matrix_map_routings_v5 *route;
-	struct adm_session_map_node_v5 *node;
+	struct q6adm_cmd_matrix_map_routings_v5 *route;
+	struct q6adm_session_map_node_v5 *node;
+	struct apr_pkt *pkt;
 	uint16_t *copps_list;
-	int cmd_size, ret, i, copp_idx;
+	int pkt_size, ret, i, copp_idx;
 	void *matrix_map = NULL;
-	struct copp *copp;
+	struct q6copp *copp;
 
 	/* Assumes port_ids have already been validated during adm_open */
-	cmd_size = (sizeof(*route) +
-		    sizeof(*node) +
+	pkt_size = (APR_HDR_SIZE + sizeof(*route) +  sizeof(*node) +
 		    (sizeof(uint32_t) * payload_map.num_copps));
-	matrix_map = kzalloc(cmd_size, GFP_KERNEL);
+
+	matrix_map = kzalloc(pkt_size, GFP_KERNEL);
 	if (!matrix_map)
 		return -ENOMEM;
 
-	route = matrix_map;
-	route->hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
-					     APR_HDR_LEN(APR_HDR_SIZE),
-					     APR_PKT_VER);
-	route->hdr.pkt_size = cmd_size;
-	route->hdr.src_svc = 0;
-	route->hdr.src_domain = APR_DOMAIN_APPS;
-	route->hdr.dest_svc = APR_SVC_ADM;
-	route->hdr.dest_domain = APR_DOMAIN_ADSP;
-	route->hdr.token = 0;
-	route->hdr.opcode = ADM_CMD_MATRIX_MAP_ROUTINGS_V5;
+	pkt = matrix_map;
+	route = matrix_map + APR_HDR_SIZE;
+	node = matrix_map + APR_HDR_SIZE + sizeof(*route);
+	copps_list = matrix_map + APR_HDR_SIZE + sizeof(*route) + sizeof(*node);
+
+	pkt->hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
+					   APR_HDR_LEN(APR_HDR_SIZE),
+					   APR_PKT_VER);
+	pkt->hdr.pkt_size = pkt_size;
+	pkt->hdr.token = 0;
+	pkt->hdr.opcode = ADM_CMD_MATRIX_MAP_ROUTINGS_V5;
 	route->num_sessions = 1;
 
 	switch (path) {
@@ -506,14 +501,11 @@ int q6adm_matrix_map(struct device *dev, int path,
 		break;
 	default:
 		dev_err(dev, "Wrong path set[%d]\n", path);
-
 		break;
 	}
 
-	node = matrix_map + sizeof(*route);
 	node->session_id = payload_map.session_id;
 	node->num_copps = payload_map.num_copps;
-	copps_list = matrix_map + sizeof(*route) + sizeof(*node);
 
 	for (i = 0; i < payload_map.num_copps; i++) {
 		int port_idx = payload_map.port_id[i];
@@ -521,48 +513,49 @@ int q6adm_matrix_map(struct device *dev, int path,
 		if (port_idx < 0) {
 			dev_err(dev, "Invalid port_id 0x%x\n",
 				payload_map.port_id[i]);
-			ret = -EINVAL;
-			goto fail_cmd;
+			kfree(pkt);
+			return -EINVAL;
 		}
 		copp_idx = payload_map.copp_idx[i];
 
-		copp = adm_find_copp(adm, port_idx, copp_idx);
+		copp = q6adm_find_copp(adm, port_idx, copp_idx);
 		if (!copp) {
-			ret = -EINVAL;
-			goto fail_cmd;
+			kfree(pkt);
+			return -EINVAL;
 		}
 
 		copps_list[i] = copp->id;
+		kref_put(&copp->refcount, q6adm_free_copp);
 	}
 
 	mutex_lock(&adm->lock);
 	adm->result.status = 0;
 	adm->result.opcode = 0;
 
-	ret = apr_send_pkt(adm->apr, matrix_map);
+	ret = apr_send_pkt(adm->apr, pkt);
 	if (ret < 0) {
-		dev_err(dev, "routing for syream %d failed ret %d\n",
+		dev_err(dev, "routing for stream %d failed ret %d\n",
 		       payload_map.session_id, ret);
 		goto fail_cmd;
 	}
 	ret = wait_event_timeout(adm->matrix_map_wait,
-				 adm->result.opcode == route->hdr.opcode,
+				 adm->result.opcode == pkt->hdr.opcode,
 				 msecs_to_jiffies(TIMEOUT_MS));
 	if (!ret) {
-		dev_err(dev, "routing for syream %d failed\n",
+		dev_err(dev, "routing for stream %d failed\n",
 		       payload_map.session_id);
 		ret = -ETIMEDOUT;
 		goto fail_cmd;
 	} else if (adm->result.status > 0) {
 		dev_err(dev, "DSP returned error[%d]\n",
-		        adm->result.status);
+			adm->result.status);
 		ret = -EINVAL;
 		goto fail_cmd;
 	}
 
 fail_cmd:
 	mutex_unlock(&adm->lock);
-	kfree(matrix_map);
+	kfree(pkt);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(q6adm_matrix_map);
@@ -571,32 +564,22 @@ EXPORT_SYMBOL_GPL(q6adm_matrix_map);
  * q6adm_close() - Close adm copp
  *
  * @dev: Pointer to adm child device.
- * @port_id: afe port id.
- * @perf_mode: perf_mode mode
- * @copp_idx: copp index to close
+ * @copp: pointer to previously opened copp
  *
  * Return: Will be an negative on error or a zero on success.
  */
-int q6adm_close(struct device *dev, int port_id, int perf_mode, int copp_idx)
+int q6adm_close(struct device *dev, struct q6copp *copp)
 {
 	struct q6adm *adm = dev_get_drvdata(dev->parent);
-	struct copp *copp;
-
-	if (port_id < 0) {
-		dev_err(dev, "Invalid port_id 0x%x\n", port_id);
-		return -EINVAL;
-	}
+	int ret = 0;
 
-	if ((copp_idx < 0) || (copp_idx >= MAX_COPPS_PER_PORT)) {
-		dev_err(dev, "Invalid copp idx: %d\n", copp_idx);
-		return -EINVAL;
+	ret = q6adm_device_close(adm, copp, copp->afe_port, copp->copp_idx);
+	if (ret < 0) {
+		dev_err(adm->dev, "Failed to close copp %d\n", ret);
+		return ret;
 	}
 
-	copp = adm_find_copp(adm, port_id, copp_idx);
-	if (!copp)
-		return -EINVAL;
-
-	kref_put(&copp->refcount, adm_free_copp);
+	kref_put(&copp->refcount, q6adm_free_copp);
 
 	return 0;
 }
diff --git a/sound/soc/qcom/qdsp6/q6adm.h b/sound/soc/qcom/qdsp6/q6adm.h
index 7ad278399ec0..4f56999b7fab 100644
--- a/sound/soc/qcom/qdsp6/q6adm.h
+++ b/sound/soc/qcom/qdsp6/q6adm.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __Q6_ADM_V2_H__
 #define __Q6_ADM_V2_H__
 
@@ -15,10 +15,12 @@ struct route_payload {
 	int port_id[MAX_COPPS_PER_PORT];
 };
 
-int q6adm_open(struct device *dev, int port_id, int path, int rate,
-	       int channel_mode, int topology, int perf_mode,
-	       uint16_t bit_width, int app_type, int acdb_id);
-int q6adm_close(struct device *dev, int port, int topology, int perf_mode);
+struct q6copp;
+struct q6copp *q6adm_open(struct device *dev, int port_id, int path, int rate,
+			   int channel_mode, int topology, int perf_mode,
+			   uint16_t bit_width, int app_type, int acdb_id);
+int q6adm_close(struct device *dev, struct q6copp *copp);
+int q6adm_get_copp_id(struct q6copp *copp);
 int q6adm_matrix_map(struct device *dev, int path,
 		     struct route_payload payload_map, int perf_mode);
 
-- 
2.24.1

