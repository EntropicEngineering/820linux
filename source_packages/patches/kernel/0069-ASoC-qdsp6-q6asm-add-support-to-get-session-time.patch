From 030eaedf8a994faf70e1294ca82f8ae64cc364bd Mon Sep 17 00:00:00 2001
From: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date: Wed, 1 Aug 2018 10:32:38 +0100
Subject: [PATCH 069/334] ASoC: qdsp6: q6asm: add support to get session time

Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
---
 sound/soc/qcom/qdsp6/q6asm.c | 122 ++++++++++++++++++++++++++++++++++-
 sound/soc/qcom/qdsp6/q6asm.h |   1 +
 2 files changed, 122 insertions(+), 1 deletion(-)

diff --git a/sound/soc/qcom/qdsp6/q6asm.c b/sound/soc/qcom/qdsp6/q6asm.c
index f0b7103a987a..e702de95e1d9 100644
--- a/sound/soc/qcom/qdsp6/q6asm.c
+++ b/sound/soc/qcom/qdsp6/q6asm.c
@@ -45,7 +45,12 @@
 #define ASM_STREAM_CMD_OPEN_READ_V3                 0x00010DB4
 #define ASM_DATA_EVENT_READ_DONE_V2 0x00010D9A
 #define ASM_STREAM_CMD_OPEN_READWRITE_V2        0x00010D8D
-
+#define ASM_SESSION_MTMX_STRTR_MODULE_ID_AVSYNC 0x00010DC6
+#define ASM_SESSION_CMD_SET_MTMX_STRTR_PARAMS_V2 0x00010DCE
+#define ASM_SESSION_CMD_GET_MTMX_STRTR_PARAMS_V2 0x00010DCF
+#define ASM_SESSION_CMDRSP_GET_MTMX_STRTR_PARAMS_V2 0x00010DD0
+#define ASM_SESSION_MTMX_STRTR_PARAM_SESSION_TIME_V3 0x00012F0B
+#define ASM_SESSION_MTMX_STRTR_PARAM_STIME_TSTMP_FLG_BMASK (0x80000000UL)
 
 #define ASM_LEGACY_STREAM_SESSION	0
 /* Bit shift for the stream_perf_mode subfield. */
@@ -89,6 +94,43 @@ struct asm_multi_channel_pcm_fmt_blk_v2 {
 	u8 channel_mapping[PCM_MAX_NUM_CHANNEL];
 } __packed;
 
+struct asm_session_cmd_get_mtmx_strstr_params_v2 {
+	u32 data_payload_addr_lsw;
+	u32 data_payload_addr_msw;
+	u32 mem_map_handle;
+	u32 direction;
+	u32 module_id;
+	u32 param_id;
+	u32 param_max_size;
+} __packed;
+
+struct asm_stream_param_data_v2 {
+	u32                  module_id;
+	u32                  param_id;
+	u16                  param_size;
+	u16                  reserved;
+} __packed;
+
+struct asm_session_mtmx_strtr_param_session_time_v3_t {
+	u32 session_time_lsw;
+	u32 session_time_msw;
+	u32 absolute_time_lsw;
+	u32 absolute_time_msw;
+	u32 time_stamp_lsw;
+	u32 time_stamp_msw;
+	u32 flags;
+} __packed;
+
+union asm_session_mtmx_strtr_data_type {
+	struct asm_session_mtmx_strtr_param_session_time_v3_t session_time;
+};
+
+struct asm_mtmx_strtr_get_params_cmdrsp {
+	uint32_t err_code;
+	struct asm_stream_param_data_v2 param_info;
+	union asm_session_mtmx_strtr_data_type param_data;
+} __packed;
+
 struct asm_stream_cmd_set_encdec_param {
 	u32                  param_id;
 	u32                  param_size;
@@ -191,6 +233,7 @@ struct audio_client {
 	/* idx:1 out port, 0: in port */
 	struct audio_port_data port[2];
 	wait_queue_head_t cmd_wait;
+	uint64_t time_stamp;
 	struct aprv2_ibasic_rsp_result_t result;
 	int perf_mode;
 	int stream_id;
@@ -519,6 +562,38 @@ static struct audio_client *q6asm_get_audio_client(struct q6asm *a,
 	return ac;
 }
 
+static void q6asm_process_mtmx_get_param_rsp(struct audio_client *ac,
+			struct asm_mtmx_strtr_get_params_cmdrsp *cmdrsp)
+{
+	struct asm_session_mtmx_strtr_param_session_time_v3_t *time;
+
+	switch (cmdrsp->param_info.module_id) {
+	case ASM_SESSION_MTMX_STRTR_MODULE_ID_AVSYNC:
+		switch (cmdrsp->param_info.param_id) {
+		case ASM_SESSION_MTMX_STRTR_PARAM_SESSION_TIME_V3:
+			time = &cmdrsp->param_data.session_time;
+			ac->time_stamp = (uint64_t)(((uint64_t)
+					 time->session_time_msw << 32) |
+					 time->session_time_lsw);
+			if (time->flags &
+			    ASM_SESSION_MTMX_STRTR_PARAM_STIME_TSTMP_FLG_BMASK)
+				dev_warn_ratelimited(ac->dev,
+						     "%s: recv inval tstmp\n",
+						     __func__);
+			break;
+		default:
+			dev_err(ac->dev, "%s: unexpected param_id %x\n",
+				__func__, cmdrsp->param_info.param_id);
+			break;
+		}
+		break;
+	default:
+		dev_err(ac->dev, "%s: unexpected mod_id %x\n",  __func__,
+			cmdrsp->param_info.module_id);
+		break;
+	}
+}
+
 static int32_t q6asm_stream_callback(struct apr_device *adev,
 				     struct apr_resp_pkt *data,
 				     int session_id)
@@ -592,6 +667,12 @@ static int32_t q6asm_stream_callback(struct apr_device *adev,
 		ret = 0;
 		goto done;
 
+	case ASM_SESSION_CMDRSP_GET_MTMX_STRTR_PARAMS_V2:
+		q6asm_process_mtmx_get_param_rsp(ac, data->payload);
+		ac->result.opcode = hdr->opcode;
+		ac->result.status = 0;
+		wake_up(&q6asm->mem_wait);
+		break;
 	case ASM_DATA_EVENT_WRITE_DONE_V2:
 		client_event = ASM_CLIENT_EVENT_DATA_WRITE_DONE;
 		if (ac->io_mode & ASM_SYNC_IO_MODE) {
@@ -1075,6 +1156,45 @@ int q6asm_enc_cfg_blk_pcm_format_support(struct audio_client *ac,
 }
 EXPORT_SYMBOL_GPL(q6asm_enc_cfg_blk_pcm_format_support);
 
+int q6asm_get_session_time(struct audio_client *ac, uint64_t *tstamp)
+{
+	struct asm_session_cmd_get_mtmx_strstr_params_v2 *param_info;
+	struct q6asm *a = dev_get_drvdata(ac->dev->parent);
+	struct apr_pkt *pkt;
+	int pkt_size, rc;
+	void *p;
+
+	pkt_size = APR_HDR_SIZE + sizeof(*param_info);
+	p = kzalloc(pkt_size, GFP_KERNEL);
+	if (!p)
+		return -ENOMEM;
+
+	pkt = p;
+	param_info = p + APR_HDR_SIZE;
+	q6asm_add_hdr(ac, &pkt->hdr, pkt_size, true, ac->stream_id);
+
+	pkt->hdr.opcode = ASM_SESSION_CMD_GET_MTMX_STRTR_PARAMS_V2;
+	param_info->data_payload_addr_lsw = 0;
+	param_info->data_payload_addr_msw = 0;
+	param_info->mem_map_handle = 0;
+	param_info->direction = (ac->io_mode & ASM_TUN_READ_IO_MODE
+					    ? 1 : 0);
+	param_info->module_id =	ASM_SESSION_MTMX_STRTR_MODULE_ID_AVSYNC;
+	param_info->param_id = ASM_SESSION_MTMX_STRTR_PARAM_SESSION_TIME_V3;
+	param_info->param_max_size = sizeof(struct asm_stream_param_data_v2) +
+		sizeof(struct asm_session_mtmx_strtr_param_session_time_v3_t);
+
+//	rc = q6asm_ac_send_cmd_sync(ac, pkt);
+	rc = q6asm_apr_send_session_pkt(a, ac, pkt,
+				ASM_SESSION_CMDRSP_GET_MTMX_STRTR_PARAMS_V2);
+
+	kfree(pkt);
+	*tstamp = ac->time_stamp;
+
+	return rc;
+}
+EXPORT_SYMBOL_GPL(q6asm_get_session_time);
+
 /**
  * q6asm_read() - read data of period size from audio client
  *
diff --git a/sound/soc/qcom/qdsp6/q6asm.h b/sound/soc/qcom/qdsp6/q6asm.h
index 2882bea51d90..9ff7f1d4acf2 100644
--- a/sound/soc/qcom/qdsp6/q6asm.h
+++ b/sound/soc/qcom/qdsp6/q6asm.h
@@ -50,6 +50,7 @@ int q6asm_open_read(struct audio_client *ac, uint32_t format,
 int q6asm_enc_cfg_blk_pcm_format_support(struct audio_client *ac,
 		uint32_t rate, uint32_t channels, uint16_t bits_per_sample);
 int q6asm_read(struct audio_client *ac);
+int q6asm_get_session_time(struct audio_client *ac, uint64_t *tstamp);
 
 int q6asm_media_format_block_multi_ch_pcm(struct audio_client *ac,
 					  uint32_t rate, uint32_t channels,
-- 
2.24.1

